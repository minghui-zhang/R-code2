facet_wrap(vars(month)) +
ggtitle(paste(data_name, "for year", year)) +
xlab("MODIS band") + ylab("reflectance") +
coord_cartesian(ylim = c(0, ymax))
return(plot)
}
get_summary_scatterplot <- function(data_frame, data_name, year, ymax) {
data_frame$month <- factor(data_frame$month, levels = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"))
levels(data_frame$month) <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
data_frame$class <- as.factor(data_frame$class)
levels(data_frame$class) <- c("Single cropped soy", "Double cropped soy", "Non-soy agriculture")
print(levels(data_frame$class))
plot <- ggplot(data = data_frame, aes(x = band_id, y = mean, col = class, pch = class)) +
geom_point(alpha = 0.8) +
geom_errorbar(data = data_frame, aes(x = band_id, ymin = mean - stdev, ymax = mean + stdev),
position = position_dodge(width = 0.4)) +
facet_wrap(~month) +
ggtitle(paste(data_name, "summary for year", year)) +
xlab("MODIS band") + ylab("reflectance") +
coord_cartesian(ylim = c(0, ymax)) +
theme_bw()
return(plot)
}
get_summary_scatterplot_indices <- function(data_frame, data_name, year, ymax) {
plot <- ggplot(data = data_frame, aes(x = index, y = mean, col = class, pch = class)) +
geom_point(alpha = 0.8) +
geom_errorbar(data = data_frame, aes(x = index, ymin = mean - stdev, ymax = mean + stdev)) +
facet_wrap(~month) +
ggtitle(paste(data_name, "summary for year", year)) +
xlab("Vegetation Index") + ylab("index value") +
coord_cartesian(ylim = c(0, ymax)) +
theme_bw()
return(plot)
}
#print(get_scatterplot(agsat_tidy, "agsat", year, 7000))
#print(get_scatterplot(plos_tidy, "plos", year, 7000))
print(get_summary_scatterplot(agsat_summary,"agsat", year, 7000))
print(get_summary_scatterplot(plos_summary, "plos", year, 7000))
#print(get_summary_scatterplot(agsat_summary,"agsat", year, 2000))
#print(get_summary_scatterplot(plos_summary, "plos", year, 2000))
#print(get_summary_scatterplot_indices(agsat_summary_indices,"agsat", year, 10))
#print(get_summary_scatterplot_indices(plos_summary_indices, "plos", year, 10))
get_scatterplot <- function(data_frame, data_name, year, ymax) {
plot <- ggplot(data = data_frame, aes(x = band_id, y = value, col = class)) +
geom_point(alpha = 0.5) +
facet_wrap(vars(month)) +
ggtitle(paste(data_name, "for year", year)) +
xlab("MODIS band") + ylab("reflectance") +
coord_cartesian(ylim = c(0, ymax))
return(plot)
}
get_summary_scatterplot <- function(data_frame, data_name, year, ymax) {
data_frame$month <- factor(data_frame$month, levels = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"))
levels(data_frame$month) <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
data_frame$class <- as.factor(data_frame$class)
levels(data_frame$class) <- c("Single cropped soy", "Double cropped soy", "Non-soy agriculture")
print(levels(data_frame$class))
plot <- ggplot(data = data_frame, aes(x = band_id, y = mean, col = class, pch = class)) +
geom_point(alpha = 0.8,
position = position_dodge(width = 0.5)) +
geom_errorbar(data = data_frame, aes(x = band_id, ymin = mean - stdev, ymax = mean + stdev),
position = position_dodge(width = 0.5)) +
facet_wrap(~month) +
ggtitle(paste(data_name, "summary for year", year)) +
xlab("MODIS band") + ylab("reflectance") +
coord_cartesian(ylim = c(0, ymax)) +
theme_bw()
return(plot)
}
get_summary_scatterplot_indices <- function(data_frame, data_name, year, ymax) {
plot <- ggplot(data = data_frame, aes(x = index, y = mean, col = class, pch = class)) +
geom_point(alpha = 0.8) +
geom_errorbar(data = data_frame, aes(x = index, ymin = mean - stdev, ymax = mean + stdev)) +
facet_wrap(~month) +
ggtitle(paste(data_name, "summary for year", year)) +
xlab("Vegetation Index") + ylab("index value") +
coord_cartesian(ylim = c(0, ymax)) +
theme_bw()
return(plot)
}
#print(get_scatterplot(agsat_tidy, "agsat", year, 7000))
#print(get_scatterplot(plos_tidy, "plos", year, 7000))
print(get_summary_scatterplot(agsat_summary,"agsat", year, 7000))
print(get_summary_scatterplot(plos_summary, "plos", year, 7000))
#print(get_summary_scatterplot(agsat_summary,"agsat", year, 2000))
#print(get_summary_scatterplot(plos_summary, "plos", year, 2000))
#print(get_summary_scatterplot_indices(agsat_summary_indices,"agsat", year, 10))
#print(get_summary_scatterplot_indices(plos_summary_indices, "plos", year, 10))
# save top five model specs in each intensity x plant_stat_type
top_onsets <- data.frame()
# tabulate onset coef for different intensities, precip datasets, percentiles
for (crop_intensity in c("SC", "DC")) {
for (plant_stat_type in c("percentile95", "percentile75", "median", "percentile25", "percentile5")) {
# get rid of 25km_Gabriel scale for simplicity
results <- all_results[all_results$intensity == crop_intensity & all_results$plant_stat_type == plant_stat_type & all_results$onset_scale != '25km_Gabriel',]
results <- results[order(results$onset_coef),]
results <- transform(results, onset_type=reorder(onset_type, -onset_coef) )
# get the top three results for plotting
results_ordered <- results[dim(results)[1]:1,] # so best onset definition is the top row
best_onset_coefs <- results_ordered[1:3,'onset_coef']
best_onset_def_type_thres <- results_ordered[1:3, 'onset_def_type_thres']
# save top five onsets
top_onsets <- rbind(top_onsets, data.frame(
crop_intensity = rep(crop_intensity, 5),
plant_stat_type = rep(plant_stat_type, 5),
onset_type = results$onset_type[(nrow(results)-4):nrow(results)]))
best_onset_plot <- ggplot(results) +
geom_point(aes(x = onset_type, y = onset_coef)) +
geom_errorbar(aes(ymin=onset_coef-onset_coef_stderr, ymax=onset_coef+onset_coef_stderr, x = onset_type)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle(paste(crop_intensity, ",", plant_stat_type)) +
ylim(c(0, 0.6)) +
ylab('onset coefficient')
best_onset_plot_scaleCompare <- ggplot(mapping = aes(x = onset_def_type_thres, y = onset_coef, col = onset_scale), results) +
geom_point() +
geom_errorbar(aes(ymin=onset_coef-onset_coef_stderr, ymax=onset_coef+onset_coef_stderr)) +
geom_point(mapping = aes(x=best_onset_def_type_thres[1], y=best_onset_coefs[1]), colour="black", shape = 1, size = 7) +
geom_point(mapping = aes(x=best_onset_def_type_thres[2], y=best_onset_coefs[2]), colour="black", shape = 1, size = 7) +
geom_point(mapping = aes(x=best_onset_def_type_thres[3], y=best_onset_coefs[3]), colour="black", shape = 1, size = 7) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle(paste(crop_intensity, ",", plant_stat_type)) +
ylim(c(0, 0.6)) +
ylab('onset coefficient')
R2_plot <- ggplot(results) +
geom_point(aes(x = onset_type, y = R2), color = "blue") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle(paste(crop_intensity, ",", plant_stat_type)) +
ylim(c(0, 0.7)) +
ylab('R2')
moran_i_pval_residual_plot <- ggplot(results) +
geom_point(aes(x = onset_type, y = moran_i_pval_residual), color = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle(paste(crop_intensity, ",", plant_stat_type)) +
ylim(c(-0.2, 1.2)) +
geom_hline(yintercept = 0.05, color = 'red') +
ylab('p-val of morans I for residual')
moran_i_pval_residual_plot_scaleCompare <- ggplot(results) +
geom_point(aes(x = onset_def_type_thres, y = moran_i_pval_residual, col = onset_scale)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle(paste(crop_intensity, ",", plant_stat_type)) +
ylim(c(-0.2, 1.2)) +
geom_hline(yintercept = 0.05, color = 'red') +
ylab('p-val of morans I for residual')
results_persiann <- results[results$precip_data == 'persiann',]
best_onset_plot_persiann <- ggplot(mapping = aes(x = onset_def_type_thres, y = onset_coef, col = onset_scale), results_persiann) +
geom_point() +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle(paste(crop_intensity, ",", plant_stat_type)) +
ylim(c(0.1, 0.5)) +
ylab('onset coefficient')
#print(best_onset_plot)
print(best_onset_plot_scaleCompare)
#print(best_onset_plot_persiann)
#print(R2_plot)
#print(moran_i_pval_residual_plot_scaleCompare)
}
}
# import data
library(ggplot2)
library(tidyverse)
library(dplyr)
library(rgdal)
library(raster)
library(sf)
library(sp)
library(leaps)
library(viridis)
library(spatial)
library(spdep)
library(plm)
os_system <- 'windows' # mac for laptop or windows for desktop
if (os_system == 'windows') {first_folder <- 'E:'}
if (os_system == 'mac') {first_folder <- '~/Documents'}
if (os_system == 'windows_laptop') {first_folder <- 'D:'}
#E:/R-code/Modeling/code/FCN_clean_csvs.R
#~/Documents/R-code
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_clean_csvs.R'))
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_plotting.R'))
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_sample_data.R'))
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_run_model_spatial_sampled.R'))
MT_outline <- readOGR(dsn = paste0(first_folder,'/R-code2/Modeling/data/shp/MatoGrossoOutline'), layer = 'MatoGrossoOutline')
crs(MT_outline) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
# read in all the onsets. only the csv, not shp
all_onset_types <- c('AA_2_persiann', 'AA_3_persiann',
'AA_25_persiann', 'AA_25_chirps_ATgabriel25km', 'AA_25_persiann_ATgabriel25km',
'freq_5_persiann', 'freq_8_persiann', 'freq_10_persiann', 'freq_12_persiann',
'monsoon_30_persiann', 'monsoon_40_persiann',
'pentad_8_persiann', 'pentad_10_persiann', 'pentad_15_persiann',
'rangethres_10_15_15_30_persiann', 'rangethres_10_15_15_40_persiann',
'rangethres_10_15_20_20_persiann', 'rangethres_10_15_20_30_persiann',
'rangethres_10_15_30_40_persiann', 'thres_10_persiann',
'AA_25_chirps_ATchirps5km',
'freq_5_chirps_ATchirps5km', 'freq_8_chirps_ATchirps5km',
'freq_10_chirps_ATchirps5km', 'freq_12_chirps_ATchirps5km',
'rangethres_10_15_15_30_chirps_ATchirps5km',
'rangethres_10_15_15_40_chirps_ATchirps5km',
'rangethres_10_15_20_20_chirps_ATchirps5km',
'rangethres_10_15_20_30_chirps_ATchirps5km',
'rangethres_10_15_30_40_chirps_ATchirps5km')
# save onset information for specific onsets
onset_info <- data.frame(
onset_type = character(0),
grid_size = numeric(0),
precip_data = character(0),
onset_def_type = character(0),
thres = character(0),
onset_scale = character(0)
)
onset_info <- rbind(onset_info,
data.frame(onset_type = 'Gabriel_onset', grid_size = 0.75, precip_data = 'Xavier', onset_def_type = 'AA', thres = '2.5', onset_scale = '25km_Gabriel'),
data.frame(onset_type = 'AA_2_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'AA', thres = '2', onset_scale = '25km_persiann'),
data.frame(onset_type = 'AA_3_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'AA', thres = '3', onset_scale = '25km_persiann'),
data.frame(onset_type = 'AA_25_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'AA', thres = '2.5', onset_scale = '25km_persiann'),
data.frame(onset_type = 'AA_25_chirps_ATgabriel25km', grid_size = 0.75, precip_data = 'chirps', onset_def_type = 'AA', thres = '2.5', onset_scale = '25km_Gabriel'),
data.frame(onset_type = 'AA_25_persiann_ATgabriel25km', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'AA', thres = '2.5', onset_scale = '25km_Gabriel'),
data.frame(onset_type = 'freq_5_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'freq', thres = '5', onset_scale = '25km_persiann'),
data.frame(onset_type = 'freq_8_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'freq', thres = '8', onset_scale = '25km_persiann'),
data.frame(onset_type = 'freq_10_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'freq', thres = '10', onset_scale = '25km_persiann'),
data.frame(onset_type = 'freq_12_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'freq', thres = '12', onset_scale = '25km_persiann'),
data.frame(onset_type = 'monsoon_30_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'monsoon', thres = '30', onset_scale = '25km_persiann'),
data.frame(onset_type = 'monsoon_40_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'monsoon', thres = '40', onset_scale = '25km_persiann'),
data.frame(onset_type = 'pentad_8_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'pentad', thres = '8', onset_scale = '25km_persiann'),
data.frame(onset_type = 'pentad_10_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'pentad', thres = '10', onset_scale = '25km_persiann'),
data.frame(onset_type = 'pentad_15_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'pentad', thres = '15', onset_scale = '25km_persiann'),
data.frame(onset_type = 'rangethres_10_15_15_30_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'rangethres', thres = '10_15_15_30', onset_scale = '25km_persiann'),
data.frame(onset_type = 'rangethres_10_15_15_40_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'rangethres', thres = '10_15_15_40', onset_scale = '25km_persiann'),
data.frame(onset_type = 'rangethres_10_15_20_20_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'rangethres', thres = '10_15_20_20', onset_scale = '25km_persiann'),
data.frame(onset_type = 'rangethres_10_15_20_30_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'rangethres', thres = '10_15_20_30', onset_scale = '25km_persiann'),
data.frame(onset_type = 'rangethres_10_15_30_40_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'rangethres', thres = '10_15_30_40', onset_scale = '25km_persiann'),
data.frame(onset_type = 'thres_10_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'thres', thres = '10', onset_scale = '25km_persiann'),
data.frame(onset_type = 'AA_25_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'AA', thres = '2.5', onset_scale = '5km_chirps'),
data.frame(onset_type = 'freq_5_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'freq', thres = '5', onset_scale = '5km_chirps'),
data.frame(onset_type = 'freq_8_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'freq', thres = '8', onset_scale = '5km_chirps'),
data.frame(onset_type = 'freq_10_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'freq', thres = '10', onset_scale = '5km_chirps'),
data.frame(onset_type = 'freq_12_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'freq', thres = '12', onset_scale = '5km_chirps'),
data.frame(onset_type = 'rangethres_10_15_15_30_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'rangethres', thres = '10_15_15_30', onset_scale = '5km_chirps'),
data.frame(onset_type = 'rangethres_10_15_15_40_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'rangethres', thres = '10_15_15_40', onset_scale = '5km_chirps'),
data.frame(onset_type = 'rangethres_10_15_20_20_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'rangethres', thres = '10_15_20_20', onset_scale = '5km_chirps'),
data.frame(onset_type = 'rangethres_10_15_20_30_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'rangethres', thres = '10_15_20_30', onset_scale = '5km_chirps'),
data.frame(onset_type = 'rangethres_10_15_30_40_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'rangethres', thres = '10_15_30_40', onset_scale = '5km_chirps')
)
crop_intensities <- c('SC', 'DC')
plant_stat_types <- c('median', 'percentile5', 'percentile25', 'percentile75', 'percentile95')
# empty data frame to store results
all_results <- data.frame()
# add in results for each onset_type
for (onset_type in all_onset_types) {
# read the data ---------------------------------------------------------------------------------------------------------
filename <- paste0(first_folder,"/R-code2/Modeling/output/robustness_test_nospatialsample/", onset_type, ".RData")
loaded_data <- load(filename)
#result_name <- paste0(onset_type, '_results')
#assign(result_name, get(loaded_data))
all_results <- rbind(all_results, get(loaded_data))
rm(loaded_data) # Remove the old object since you've stored it in result_name
}
# create new column for onset_def_type + thres combination
create_type_and_thres_col <- function(row) {
onset_type <- row['onset_def_type']
thres_val <- row['thres']
type_and_thres <- paste0(onset_type, '_', thres_val)
return(type_and_thres)
}
all_results['onset_def_type_thres'] <- apply(all_results, 1, create_type_and_thres_col)
# save top five model specs in each intensity x plant_stat_type
top_onsets <- data.frame()
# tabulate onset coef for different intensities, precip datasets, percentiles
for (crop_intensity in c("SC", "DC")) {
for (plant_stat_type in c("percentile95", "percentile75", "median", "percentile25", "percentile5")) {
# get rid of 25km_Gabriel scale for simplicity
results <- all_results[all_results$intensity == crop_intensity & all_results$plant_stat_type == plant_stat_type & all_results$onset_scale != '25km_Gabriel',]
results <- results[order(results$onset_coef),]
results <- transform(results, onset_type=reorder(onset_type, -onset_coef) )
# get the top three results for plotting
results_ordered <- results[dim(results)[1]:1,] # so best onset definition is the top row
best_onset_coefs <- results_ordered[1:3,'onset_coef']
best_onset_def_type_thres <- results_ordered[1:3, 'onset_def_type_thres']
# save top five onsets
top_onsets <- rbind(top_onsets, data.frame(
crop_intensity = rep(crop_intensity, 5),
plant_stat_type = rep(plant_stat_type, 5),
onset_type = results$onset_type[(nrow(results)-4):nrow(results)]))
best_onset_plot <- ggplot(results) +
geom_point(aes(x = onset_type, y = onset_coef)) +
geom_errorbar(aes(ymin=onset_coef-onset_coef_stderr, ymax=onset_coef+onset_coef_stderr, x = onset_type)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle(paste(crop_intensity, ",", plant_stat_type)) +
ylim(c(0, 0.6)) +
ylab('onset coefficient')
best_onset_plot_scaleCompare <- ggplot(mapping = aes(x = onset_def_type_thres, y = onset_coef, col = onset_scale), results) +
geom_point() +
geom_errorbar(aes(ymin=onset_coef-onset_coef_stderr, ymax=onset_coef+onset_coef_stderr)) +
geom_point(mapping = aes(x=best_onset_def_type_thres[1], y=best_onset_coefs[1]), colour="black", shape = 1, size = 7) +
geom_point(mapping = aes(x=best_onset_def_type_thres[2], y=best_onset_coefs[2]), colour="black", shape = 1, size = 7) +
geom_point(mapping = aes(x=best_onset_def_type_thres[3], y=best_onset_coefs[3]), colour="black", shape = 1, size = 7) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle(paste(crop_intensity, ",", plant_stat_type)) +
ylim(c(0, 0.6)) +
ylab('onset coefficient')
R2_plot <- ggplot(results) +
geom_point(aes(x = onset_type, y = R2), color = "blue") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle(paste(crop_intensity, ",", plant_stat_type)) +
ylim(c(0, 0.7)) +
ylab('R2')
moran_i_pval_residual_plot <- ggplot(results) +
geom_point(aes(x = onset_type, y = moran_i_pval_residual), color = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle(paste(crop_intensity, ",", plant_stat_type)) +
ylim(c(-0.2, 1.2)) +
geom_hline(yintercept = 0.05, color = 'red') +
ylab('p-val of morans I for residual')
moran_i_pval_residual_plot_scaleCompare <- ggplot(results) +
geom_point(aes(x = onset_def_type_thres, y = moran_i_pval_residual, col = onset_scale)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle(paste(crop_intensity, ",", plant_stat_type)) +
ylim(c(-0.2, 1.2)) +
geom_hline(yintercept = 0.05, color = 'red') +
ylab('p-val of morans I for residual')
results_persiann <- results[results$precip_data == 'persiann',]
best_onset_plot_persiann <- ggplot(mapping = aes(x = onset_def_type_thres, y = onset_coef, col = onset_scale), results_persiann) +
geom_point() +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle(paste(crop_intensity, ",", plant_stat_type)) +
ylim(c(0.1, 0.5)) +
ylab('onset coefficient')
#print(best_onset_plot)
print(best_onset_plot_scaleCompare)
#print(best_onset_plot_persiann)
#print(R2_plot)
#print(moran_i_pval_residual_plot_scaleCompare)
}
}
year_oi <- 2012 # to map
intensity_oi <- "SC" # to map
percentile_oi <- "median"
# filter a specific year
cell_sf_tidy_year <- cell_sf_tidy %>% filter(year == year_oi) %>%
filter(intensity == intensity_oi) %>%
filter(plant_stat_type == percentile_oi)
# cell data -------------------------------------------------------------------------------------------
filename_cell_median <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/median_onset_cell_', onset_type, '.csv')
filename_cell_percentile5 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile5_onset_cell_', onset_type, '.csv')
filename_cell_percentile25 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile25_onset_cell_', onset_type, '.csv')
filename_cell_percentile75 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile75_onset_cell_', onset_type, '.csv')
filename_cell_percentile95 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile95_onset_cell_', onset_type, '.csv')
filename_cell_shp<- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type, '/shp')
layername_cell_shp <- paste0('median_onset_cell_SHP_', onset_type)
median_cell_raw <- read.csv(filename_cell_median)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(rgdal)
library(raster)
library(sf)
library(sp)
library(leaps)
library(viridis)
library(spatial)
library(spdep)
library(plm)
library(lmtest)
library(Metrics)
library(randomForest)
# select the onset definition
onset_type <- 'freq_8_chirps_ATchirps5km' #'freq_8_chirps_ATchirps5km' #'AA_25_chirps_ATchirps5km', 'freq_10_persiann', 'AA_25_persiann'# 'Gabriel_onset'
# import data for all sections
os_system <- 'windows' # mac for laptop or windows for desktop
if (os_system == 'windows') {first_folder <- 'E:'}
if (os_system == 'mac') {first_folder <- '~/Documents'}
if (os_system == 'windows_laptop') {first_folder <- 'D:'}
#E:/R-code/Modeling/code/FCN_clean_csvs.R
#~/Documents/R-code
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_clean_csvs.R'))
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_plotting.R'))
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_sample_data.R'))
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_run_model_spatial_sampled.R'))
MT_outline <- readOGR(dsn = paste0(first_folder,'/R-code2/Modeling/data/shp/MatoGrossoOutline'), layer = 'MatoGrossoOutline')
crs(MT_outline) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
min_soy_area <- 2 #km2. min area of total or SC/DC soy in cell, muni or property to be considered in model
# cell data -------------------------------------------------------------------------------------------
filename_cell_median <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/median_onset_cell_', onset_type, '.csv')
filename_cell_percentile5 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile5_onset_cell_', onset_type, '.csv')
filename_cell_percentile25 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile25_onset_cell_', onset_type, '.csv')
filename_cell_percentile75 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile75_onset_cell_', onset_type, '.csv')
filename_cell_percentile95 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile95_onset_cell_', onset_type, '.csv')
filename_cell_shp<- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type, '/shp')
layername_cell_shp <- paste0('median_onset_cell_SHP_', onset_type)
median_cell_raw <- read.csv(filename_cell_median)
percentile5_cell_raw <- read.csv(filename_cell_percentile5)
percentile25_cell_raw <- read.csv(filename_cell_percentile25)
percentile75_cell_raw <- read.csv(filename_cell_percentile75)
percentile95_cell_raw <- read.csv(filename_cell_percentile95)
cell_sf <- st_read(dsn = filename_cell_shp, layer = layername_cell_shp)
# clean data --------------------------------------------------------------------------------------------
# csv data
median_cell <- median_cell_raw %>% delete_cols_median_cell() %>%
rename_cols_median_cell()
median_cell$plant_stat_type <- rep('median', nrow(median_cell))
percentile5_cell <- percentile5_cell_raw %>% rename_cols_percentile_cell()
percentile25_cell <- percentile25_cell_raw %>% rename_cols_percentile_cell()
percentile75_cell <- percentile75_cell_raw %>% rename_cols_percentile_cell()
percentile95_cell <- percentile95_cell_raw %>% rename_cols_percentile_cell()
# sf data
# add cell_ID
clean_cell_ID <- function(cell_ID) {
strsplit(cell_ID, "_")[[1]][2]
}
# get cell_ID column for median
cell_sf$cell_ID <- median_cell$cell_ID
cell_sf$cell_ID <- sapply(as.character(cell_sf$cell_ID), clean_cell_ID)
# at this point, cell_sf has same number of rows in each year. add the previous year's onset, using NA for 2004
# cells_per_year <- nrow(cell_sf[cell_sf$year == 2004,])
# prev_year_onsets <- cell_sf[cell_sf$year <= 2013, 'onset']
# st_geometry(prev_year_onsets) <- NULL
# cell_sf$prev_onset <- c(rep(NA, cells_per_year), prev_year_onsets$onset)
# join median, percentile data to cell_sf
# cell_sf has median information, but copy it and put in percentile info for DC and SC plant
cell_sf$plant_stat_type <- rep("median", nrow(cell_sf))
cell_sf_percentile5 <- cell_sf
cell_sf_percentile5$SC_plant <- percentile5_cell$SC_plant
cell_sf_percentile5$DC_plant <- percentile5_cell$DC_plant
cell_sf_percentile5$plant_stat_type <- rep("percentile5", nrow(cell_sf_percentile5))
cell_sf_percentile25 <- cell_sf
cell_sf_percentile25$SC_plant <- percentile25_cell$SC_plant
cell_sf_percentile25$DC_plant <- percentile25_cell$DC_plant
cell_sf_percentile25$plant_stat_type <- rep("percentile25", nrow(cell_sf_percentile25))
cell_sf_percentile75 <- cell_sf
cell_sf_percentile75$SC_plant <- percentile75_cell$SC_plant
cell_sf_percentile75$DC_plant <- percentile75_cell$DC_plant
cell_sf_percentile75$plant_stat_type <- rep("percentile75", nrow(cell_sf_percentile75))
cell_sf_percentile95 <- cell_sf
cell_sf_percentile95$SC_plant <- percentile95_cell$SC_plant
cell_sf_percentile95$DC_plant <- percentile95_cell$DC_plant
cell_sf_percentile95$plant_stat_type <- rep("percentile95", nrow(cell_sf_percentile95))
cell_sf <- rbind(cell_sf, cell_sf_percentile5, cell_sf_percentile25, cell_sf_percentile75, cell_sf_percentile95)
cell_sf_tidy <- cell_sf %>% tidy_by_intensity_plant("SC_plant", "DC_plant") %>%
dplyr::select(-c(SC_harvest, DC_harvest)) %>%
categorize_regions_cell_sf_tidy() # categorize cells into four regions
cell_sf_tidy$year_index <- cell_sf_tidy$year - 2003
cell_sf_tidy$year_factor <- as.factor(cell_sf_tidy$year)
#cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy <- cell_sf_tidy[!is.na(cell_sf_tidy$plant),]
cell_sf_tidy$delay <- cell_sf_tidy$plant - cell_sf_tidy$onset
# NOTE: the followign works but is slow, did it another way above
# # add previous year's onset; if 2004, use 2004's onset
# get_prev_onset <- function(row) {
#   curr_year <- row$year
#   cell_ID_oi <- row$cell_ID
#
#   if (curr_year == 2004) {return(NA)}
#   if (curr_year != 2004) {prev_year <- curr_year - 1}
#
#   prev_onset <- cell_sf_tidy[cell_sf_tidy$year == prev_year & cell_sf_tidy$cell_ID == cell_ID_oi, 'onset']
#   st_geometry(prev_onset) <- NULL
#
#   return(prev_onset[1, 'onset'])
# }
#
# cell_sf_tidy$prev_onset <- apply(cell_sf_tidy, 1, get_prev_onset)
year_oi <- 2012 # to map
intensity_oi <- "SC" # to map
percentile_oi <- "median"
# filter a specific year
cell_sf_tidy_year <- cell_sf_tidy %>% filter(year == year_oi) %>%
filter(intensity == intensity_oi) %>%
filter(plant_stat_type == percentile_oi)
# muni_sf_tidy_year <- muni_sf_tidy %>% filter(year == year_oi) %>%
#                                    filter(intensity == intensity_oi) %>%
#                                    filter(plant_stat_type == percentile_oi)
# CARpoly_sf_tidy_year <- CARpoly_sf %>% filter(year == year_oi)
ggplot(cell_sf_tidy_year) +
geom_sf(aes(fill = plant) , colour = NA) +
scale_fill_viridis(limits = c(30, 150)) +
ggtitle(paste("Cell median planting date", year_oi, intensity_oi, percentile_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
ggplot(cell_sf_tidy_year) +
geom_sf(aes(fill = onset)) + # , colour = NA) +
scale_fill_viridis() +
ggtitle(paste("Onset", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
ggplot(muni_sf_tidy_year) +
geom_sf(aes(fill = plant)) + #, colour = NA) +
scale_fill_viridis(limits = c(30, 150)) +
ggtitle(paste("Muni median planting date", year_oi, intensity_oi, percentile_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
