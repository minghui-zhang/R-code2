year_coef <- coefficients["year"]
# standard errors
std_errors <- summary(fe_model)$coefficients[,2]
onset_std_error <- std_errors["onset"]
year_std_error <- std_errors["year"]
data_bootstrap_coefs <- rbind(data_bootstrap_coefs, data.frame(intensity = intensity, percentile = percentile,
onset_coef = onset_coef, onset_sderr = onset_std_error,
year_coef = year_coef, year_sderr = year_std_error))
}
}
}
# import data
library(ggplot2)
library(tidyverse)
library(dplyr)
library(rgdal)
library(raster)
library(sf)
library(sp)
library(leaps)
library(viridis)
library(spatial)
library(spdep)
library(plm)
os_system <- 'windows' # mac for laptop or windows for desktop
if (os_system == 'windows') {first_folder <- 'E:'}
if (os_system == 'mac') {first_folder <- '~/Documents'}
if (os_system == 'windows_laptop') {first_folder <- 'D:'}
#E:/R-code/Modeling/code/FCN_clean_csvs.R
#~/Documents/R-code
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_clean_csvs.R'))
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_plotting.R'))
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_sample_data.R'))
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_run_model_spatial_sampled.R'))
MT_outline <- readOGR(dsn = paste0(first_folder,'/R-code2/Modeling/data/shp/MatoGrossoOutline'), layer = 'MatoGrossoOutline')
crs(MT_outline) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
# read in all the onsets. only the csv, not shp
all_onset_types <- c('AA_2_persiann', 'AA_3_persiann',
'AA_25_persiann', 'AA_25_chirps_ATgabriel25km', 'AA_25_persiann_ATgabriel25km',
'freq_5_persiann', 'freq_8_persiann', 'freq_10_persiann', 'freq_12_persiann',
'monsoon_30_persiann', 'monsoon_40_persiann',
'pentad_8_persiann', 'pentad_10_persiann', 'pentad_15_persiann',
'rangethres_10_15_15_30_persiann', 'rangethres_10_15_15_40_persiann',
'rangethres_10_15_20_20_persiann', 'rangethres_10_15_20_30_persiann',
'rangethres_10_15_30_40_persiann', 'thres_10_persiann',
'AA_25_chirps_ATchirps5km',
'freq_5_chirps_ATchirps5km', 'freq_8_chirps_ATchirps5km',
'freq_10_chirps_ATchirps5km', 'freq_12_chirps_ATchirps5km',
'rangethres_10_15_15_30_chirps_ATchirps5km',
'rangethres_10_15_15_40_chirps_ATchirps5km',
'rangethres_10_15_20_20_chirps_ATchirps5km',
'rangethres_10_15_20_30_chirps_ATchirps5km',
'rangethres_10_15_30_40_chirps_ATchirps5km')
# save onset information for specific onsets
onset_info <- data.frame(
onset_type = character(0),
grid_size = numeric(0),
precip_data = character(0),
onset_def_type = character(0),
thres = character(0),
onset_scale = character(0)
)
onset_info <- rbind(onset_info,
data.frame(onset_type = 'Gabriel_onset', grid_size = 0.75, precip_data = 'Xavier', onset_def_type = 'AA', thres = '2.5', onset_scale = '25km_Gabriel'),
data.frame(onset_type = 'AA_2_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'AA', thres = '2', onset_scale = '25km_persiann'),
data.frame(onset_type = 'AA_3_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'AA', thres = '3', onset_scale = '25km_persiann'),
data.frame(onset_type = 'AA_25_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'AA', thres = '2.5', onset_scale = '25km_persiann'),
data.frame(onset_type = 'AA_25_chirps_ATgabriel25km', grid_size = 0.75, precip_data = 'chirps', onset_def_type = 'AA', thres = '2.5', onset_scale = '25km_Gabriel'),
data.frame(onset_type = 'AA_25_persiann_ATgabriel25km', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'AA', thres = '2.5', onset_scale = '25km_Gabriel'),
data.frame(onset_type = 'freq_5_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'freq', thres = '5', onset_scale = '25km_persiann'),
data.frame(onset_type = 'freq_8_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'freq', thres = '8', onset_scale = '25km_persiann'),
data.frame(onset_type = 'freq_10_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'freq', thres = '10', onset_scale = '25km_persiann'),
data.frame(onset_type = 'freq_12_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'freq', thres = '12', onset_scale = '25km_persiann'),
data.frame(onset_type = 'monsoon_30_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'monsoon', thres = '30', onset_scale = '25km_persiann'),
data.frame(onset_type = 'monsoon_40_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'monsoon', thres = '40', onset_scale = '25km_persiann'),
data.frame(onset_type = 'pentad_8_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'pentad', thres = '8', onset_scale = '25km_persiann'),
data.frame(onset_type = 'pentad_10_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'pentad', thres = '10', onset_scale = '25km_persiann'),
data.frame(onset_type = 'pentad_15_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'pentad', thres = '15', onset_scale = '25km_persiann'),
data.frame(onset_type = 'rangethres_10_15_15_30_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'rangethres', thres = '10_15_15_30', onset_scale = '25km_persiann'),
data.frame(onset_type = 'rangethres_10_15_15_40_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'rangethres', thres = '10_15_15_40', onset_scale = '25km_persiann'),
data.frame(onset_type = 'rangethres_10_15_20_20_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'rangethres', thres = '10_15_20_20', onset_scale = '25km_persiann'),
data.frame(onset_type = 'rangethres_10_15_20_30_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'rangethres', thres = '10_15_20_30', onset_scale = '25km_persiann'),
data.frame(onset_type = 'rangethres_10_15_30_40_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'rangethres', thres = '10_15_30_40', onset_scale = '25km_persiann'),
data.frame(onset_type = 'thres_10_persiann', grid_size = 0.75, precip_data = 'persiann', onset_def_type = 'thres', thres = '10', onset_scale = '25km_persiann'),
data.frame(onset_type = 'AA_25_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'AA', thres = '2.5', onset_scale = '5km_chirps'),
data.frame(onset_type = 'freq_5_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'freq', thres = '5', onset_scale = '5km_chirps'),
data.frame(onset_type = 'freq_8_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'freq', thres = '8', onset_scale = '5km_chirps'),
data.frame(onset_type = 'freq_10_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'freq', thres = '10', onset_scale = '5km_chirps'),
data.frame(onset_type = 'freq_12_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'freq', thres = '12', onset_scale = '5km_chirps'),
data.frame(onset_type = 'rangethres_10_15_15_30_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'rangethres', thres = '10_15_15_30', onset_scale = '5km_chirps'),
data.frame(onset_type = 'rangethres_10_15_15_40_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'rangethres', thres = '10_15_15_40', onset_scale = '5km_chirps'),
data.frame(onset_type = 'rangethres_10_15_20_20_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'rangethres', thres = '10_15_20_20', onset_scale = '5km_chirps'),
data.frame(onset_type = 'rangethres_10_15_20_30_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'rangethres', thres = '10_15_20_30', onset_scale = '5km_chirps'),
data.frame(onset_type = 'rangethres_10_15_30_40_chirps_ATchirps5km', grid_size = 0.5, precip_data = 'chirps', onset_def_type = 'rangethres', thres = '10_15_30_40', onset_scale = '5km_chirps')
)
crop_intensities <- c('SC', 'DC')
plant_stat_types <- c('median', 'percentile5', 'percentile25', 'percentile75', 'percentile95')
# empty data frame to store results
all_results <- data.frame()
# add in results for each onset_type
for (onset_type in all_onset_types) {
# read the data ---------------------------------------------------------------------------------------------------------
filename <- paste0(first_folder,"/R-code2/Modeling/output/robustness_test_nospatialsample/", onset_type, ".RData")
loaded_data <- load(filename)
#result_name <- paste0(onset_type, '_results')
#assign(result_name, get(loaded_data))
all_results <- rbind(all_results, get(loaded_data))
rm(loaded_data) # Remove the old object since you've stored it in result_name
}
# create new column for onset_def_type + thres combination
create_type_and_thres_col <- function(row) {
onset_type <- row['onset_def_type']
thres_val <- row['thres']
type_and_thres <- paste0(onset_type, '_', thres_val)
return(type_and_thres)
}
all_results['onset_def_type_thres'] <- apply(all_results, 1, create_type_and_thres_col)
# import data for onset_oi
onset_oi <- 'freq_8_chirps_ATchirps5km' #'freq_10_persiann'
onset_baseline <- 'AA_25_persiann' # to compare to onset_oi in difference maps, etc 'AA_25_persiann'
# FOR onset_oi ------------------------------------------------------------------------------------------------------------------------
# read and clean the data ---------------------------------------------------------------------------------------------------------
filename_median <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_oi, '/median_onset_cell_', onset_oi , '.csv')
filename_percentile5 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_oi , '/percentile5_onset_cell_', onset_oi , '.csv')
filename_percentile25 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_oi , '/percentile25_onset_cell_', onset_oi , '.csv')
filename_percentile75 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_oi,
'/percentile75_onset_cell_', onset_oi, '.csv')
filename_percentile95 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_oi,
'/percentile95_onset_cell_', onset_oi, '.csv')
filename_shp<- paste0(first_folder,'/R-code-large-files/data_onset_', onset_oi , '/shp')
layername_shp <- paste0('median_onset_cell_SHP_', onset_oi )
median_cell_raw <- read.csv(filename_median)
percentile5_cell_raw <- read.csv(filename_percentile5)
percentile25_cell_raw <- read.csv(filename_percentile25)
percentile75_cell_raw <- read.csv(filename_percentile75)
percentile95_cell_raw <- read.csv(filename_percentile95)
cell_sf <- st_read(dsn = filename_shp, layer = layername_shp)
# CSV DATA -----------------------------------------------------------------------------------------------
# median cell
median_cell <- median_cell_raw %>% delete_cols_median_cell() %>%
rename_cols_median_cell()
median_cell$plant_stat_type <- rep('median', nrow(median_cell))
# percentiles
percentile5_cell <- percentile5_cell_raw %>% rename_cols_percentile_cell()
percentile25_cell <- percentile25_cell_raw %>% rename_cols_percentile_cell()
percentile75_cell <- percentile75_cell_raw %>% rename_cols_percentile_cell()
percentile95_cell <- percentile95_cell_raw %>% rename_cols_percentile_cell()
# SF DATA ------------------------------------------------------------------------------------------------
# get cell_ID column for median
cell_sf$cell_ID <- median_cell$cell_ID
cell_sf$cell_ID <- sapply(as.character(cell_sf$cell_ID), clean_cell_ID)
# join median, percentile data to cell_sf
# cell_sf has median information, but copy it and put in percentile info for DC and SC plant
cell_sf$plant_stat_type <- rep("median", nrow(cell_sf))
cell_sf_percentile5 <- cell_sf
cell_sf_percentile5$SC_plant <- percentile5_cell$SC_plant
cell_sf_percentile5$DC_plant <- percentile5_cell$DC_plant
cell_sf_percentile5$plant_stat_type <- rep("percentile5", nrow(cell_sf_percentile5))
cell_sf_percentile25 <- cell_sf
cell_sf_percentile25$SC_plant <- percentile25_cell$SC_plant
cell_sf_percentile25$DC_plant <- percentile25_cell$DC_plant
cell_sf_percentile25$plant_stat_type <- rep("percentile25", nrow(cell_sf_percentile25))
cell_sf_percentile75 <- cell_sf
cell_sf_percentile75$SC_plant <- percentile75_cell$SC_plant
cell_sf_percentile75$DC_plant <- percentile75_cell$DC_plant
cell_sf_percentile75$plant_stat_type <- rep("percentile75", nrow(cell_sf_percentile75))
cell_sf_percentile95 <- cell_sf
cell_sf_percentile95$SC_plant <- percentile95_cell$SC_plant
cell_sf_percentile95$DC_plant <- percentile95_cell$DC_plant
cell_sf_percentile95$plant_stat_type <- rep("percentile95", nrow(cell_sf_percentile95))
cell_sf <- rbind(cell_sf, cell_sf_percentile5, cell_sf_percentile25, cell_sf_percentile75, cell_sf_percentile95)
cell_sf_tidy <- cell_sf %>% tidy_by_intensity_plant("SC_plant", "DC_plant") %>%
dplyr::select(-c(SC_harvest, DC_harvest)) %>%
categorize_regions_cell_sf_tidy() # categorize cells into four regions
cell_sf_tidy$year_index <- cell_sf_tidy$year - 2003
cell_sf_tidy$year_factor <- as.factor(cell_sf_tidy$year)
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy$delay <- cell_sf_tidy$plant - cell_sf_tidy$onset
# calculate quantiles of onset
onset_oi_data <- cell_sf_tidy %>%
mutate(onset_quantile_allyears = ntile(onset, 10))
print('onset_oi done')
# FOR onset_baseline ------------------------------------------------------------------------------------------------------------------
# read and clean the data ---------------------------------------------------------------------------------------------------------
filename_median <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_baseline, '/median_onset_cell_', onset_baseline , '.csv')
filename_percentile5 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_baseline , '/percentile5_onset_cell_', onset_baseline , '.csv')
filename_percentile25 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_baseline , '/percentile25_onset_cell_', onset_baseline , '.csv')
filename_percentile75 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_baseline , '/percentile75_onset_cell_', onset_baseline , '.csv')
filename_percentile95 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_baseline , '/percentile95_onset_cell_', onset_baseline , '.csv')
filename_shp <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_baseline , '/shp')
layername_shp <- paste0('median_onset_cell_SHP_', onset_baseline )
median_cell_raw <- read.csv(filename_median)
percentile5_cell_raw <- read.csv(filename_percentile5)
percentile25_cell_raw <- read.csv(filename_percentile25)
percentile75_cell_raw <- read.csv(filename_percentile75)
percentile95_cell_raw <- read.csv(filename_percentile95)
cell_sf <- st_read(dsn = filename_shp, layer = layername_shp)
# CSV DATA -----------------------------------------------------------------------------------------------
# median cell
median_cell <- median_cell_raw %>% delete_cols_median_cell() %>%
rename_cols_median_cell()
median_cell$plant_stat_type <- rep('median', nrow(median_cell))
# percentiles
percentile5_cell <- percentile5_cell_raw %>% rename_cols_percentile_cell()
percentile25_cell <- percentile25_cell_raw %>% rename_cols_percentile_cell()
percentile75_cell <- percentile75_cell_raw %>% rename_cols_percentile_cell()
percentile95_cell <- percentile95_cell_raw %>% rename_cols_percentile_cell()
# SF DATA ------------------------------------------------------------------------------------------------
# get cell_ID column for median
cell_sf$cell_ID <- median_cell$cell_ID
cell_sf$cell_ID <- sapply(as.character(cell_sf$cell_ID), clean_cell_ID)
# join median, percentile data to cell_sf
# cell_sf has median information, but copy it and put in percentile info for DC and SC plant
cell_sf$plant_stat_type <- rep("median", nrow(cell_sf))
cell_sf_percentile5 <- cell_sf
cell_sf_percentile5$SC_plant <- percentile5_cell$SC_plant
cell_sf_percentile5$DC_plant <- percentile5_cell$DC_plant
cell_sf_percentile5$plant_stat_type <- rep("percentile5", nrow(cell_sf_percentile5))
cell_sf_percentile25 <- cell_sf
cell_sf_percentile25$SC_plant <- percentile25_cell$SC_plant
cell_sf_percentile25$DC_plant <- percentile25_cell$DC_plant
cell_sf_percentile25$plant_stat_type <- rep("percentile25", nrow(cell_sf_percentile25))
cell_sf_percentile75 <- cell_sf
cell_sf_percentile75$SC_plant <- percentile75_cell$SC_plant
cell_sf_percentile75$DC_plant <- percentile75_cell$DC_plant
cell_sf_percentile75$plant_stat_type <- rep("percentile75", nrow(cell_sf_percentile75))
cell_sf_percentile95 <- cell_sf
cell_sf_percentile95$SC_plant <- percentile95_cell$SC_plant
cell_sf_percentile95$DC_plant <- percentile95_cell$DC_plant
cell_sf_percentile95$plant_stat_type <- rep("percentile95", nrow(cell_sf_percentile95))
cell_sf <- rbind(cell_sf, cell_sf_percentile5, cell_sf_percentile25, cell_sf_percentile75, cell_sf_percentile95)
cell_sf_tidy <- cell_sf %>% tidy_by_intensity_plant("SC_plant", "DC_plant") %>%
dplyr::select(-c(SC_harvest, DC_harvest)) %>%
categorize_regions_cell_sf_tidy() # categorize cells into four regions
cell_sf_tidy$year_index <- cell_sf_tidy$year - 2003
cell_sf_tidy$year_factor <- as.factor(cell_sf_tidy$year)
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy$delay <- cell_sf_tidy$plant - cell_sf_tidy$onset
# calculate quantiles of onset
onset_baseline_data <- cell_sf_tidy %>%
mutate(onset_quantile_allyears = ntile(onset, 10))
print('onset_baseline done')
# eliminated predictors: repeat FE specification with eliminated predictors for the chosen onset definition. report onset coefficient for each intensity, percentile
elimpred_results <- data.frame(intensity = character(0), percentile = character(0),
onset_coef = numeric(0), onset_stderr = numeric(0),
model_type = character(0))
for (intensity in c("SC", "DC")) {
for (percentile in c('percentile5', 'percentile25', 'median', 'percentile75', 'percentile95')) {
print(percentile)
data_subset <- onset_oi_data[(onset_oi_data$plant_stat_type == percentile) & (onset_oi_data$intensity == intensity), ]
data_subset_panel <- pdata.frame(data_subset, index = c("cell_ID"))
fe_model <- plm(plant ~ onset + year, data = data_subset_panel, model = "within")
fe_model_elimpred <- plm(plant ~ onset, data = data_subset_panel, model = "within")
ols_model <- lm(plant ~ onset + year + lat + lon + region, data = data_subset)
ols_model_elimpred <- lm(plant ~ onset, data = data_subset)
# get coefficients
fe_onset_coef <- fe_model$coefficients["onset"]
fe_elimpred_onset_coef <- fe_model_elimpred$coefficients["onset"]
ols_onset_coef <- ols_model$coefficients["onset"]
ols_elimpred_onset_coef <- ols_model_elimpred$coefficients["onset"]
fe_onset_stderr <- summary(fe_model)$coefficients['onset', 'Std. Error']
fe_elimpred_onset_stderr <- summary(fe_model_elimpred)$coefficients['onset', 'Std. Error']
ols_onset_stderr <- summary(ols_model)$coefficients['onset', 'Std. Error']
ols_elimpred_onset_stderr <- summary(ols_model_elimpred)$coefficients['onset', 'Std. Error']
results <- data.frame(intensity = rep(intensity, 4), percentile = rep(percentile, 4),
onset_coef = c(fe_onset_coef, fe_elimpred_onset_coef,
ols_onset_coef, ols_elimpred_onset_coef),
onset_stderr = c(fe_onset_stderr, fe_elimpred_onset_stderr,
ols_onset_stderr, ols_elimpred_onset_stderr),
model_type = c('fe', 'fe_elimpred', 'ols', 'ols_elimpred'))
elimpred_results <- rbind(elimpred_results, results)
}
}
print(elimpred_results)
# different degrees of eliminated predictors on x axis, and onset coef on y axis
elimpred_plot <- ggplot(elimpred_results) +
geom_point(aes(x = model_type, y = onset_coef)) +
geom_errorbar(aes(ymin=onset_coef-onset_stderr, ymax=onset_coef+onset_stderr, x = model_type)) +
facet_wrap(intensity ~ percentile,  ncol=5) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
print(elimpred_plot)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(rgdal)
library(raster)
library(sf)
library(sp)
library(leaps)
library(viridis)
library(spatial)
library(spdep)
library(plm)
library(lmtest)
library(Metrics)
library(randomForest)
# select the onset definition
onset_type <- 'freq_8_chirps_ATchirps5km' #'freq_8_chirps_ATchirps5km' #'AA_25_chirps_ATchirps5km' # 'Gabriel_onset'
# import data for all sections
os_system <- 'windows' # mac for laptop or windows for desktop
if (os_system == 'windows') {first_folder <- 'E:'}
if (os_system == 'mac') {first_folder <- '~/Documents'}
if (os_system == 'windows_laptop') {first_folder <- 'D:'}
#E:/R-code/Modeling/code/FCN_clean_csvs.R
#~/Documents/R-code
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_clean_csvs.R'))
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_plotting.R'))
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_sample_data.R'))
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_run_model_spatial_sampled.R'))
MT_outline <- readOGR(dsn = paste0(first_folder,'/R-code2/Modeling/data/shp/MatoGrossoOutline'), layer = 'MatoGrossoOutline')
crs(MT_outline) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
min_soy_area <- 2 #km2. min area of total or SC/DC soy in cell, muni or property to be considered in model
# cell data -------------------------------------------------------------------------------------------
filename_cell_median <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/median_onset_cell_', onset_type, '.csv')
filename_cell_percentile5 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile5_onset_cell_', onset_type, '.csv')
filename_cell_percentile25 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile25_onset_cell_', onset_type, '.csv')
filename_cell_percentile75 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile75_onset_cell_', onset_type, '.csv')
filename_cell_percentile95 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile95_onset_cell_', onset_type, '.csv')
filename_cell_shp<- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type, '/shp')
layername_cell_shp <- paste0('median_onset_cell_SHP_', onset_type)
median_cell_raw <- read.csv(filename_cell_median)
percentile5_cell_raw <- read.csv(filename_cell_percentile5)
percentile25_cell_raw <- read.csv(filename_cell_percentile25)
percentile75_cell_raw <- read.csv(filename_cell_percentile75)
percentile95_cell_raw <- read.csv(filename_cell_percentile95)
cell_sf <- st_read(dsn = filename_cell_shp, layer = layername_cell_shp)
# clean data --------------------------------------------------------------------------------------------
# csv data
median_cell <- median_cell_raw %>% delete_cols_median_cell() %>%
rename_cols_median_cell()
median_cell$plant_stat_type <- rep('median', nrow(median_cell))
percentile5_cell <- percentile5_cell_raw %>% rename_cols_percentile_cell()
percentile25_cell <- percentile25_cell_raw %>% rename_cols_percentile_cell()
percentile75_cell <- percentile75_cell_raw %>% rename_cols_percentile_cell()
percentile95_cell <- percentile95_cell_raw %>% rename_cols_percentile_cell()
# sf data
# add cell_ID
clean_cell_ID <- function(cell_ID) {
strsplit(cell_ID, "_")[[1]][2]
}
# get cell_ID column for median
cell_sf$cell_ID <- median_cell$cell_ID
cell_sf$cell_ID <- sapply(as.character(cell_sf$cell_ID), clean_cell_ID)
# at this point, cell_sf has same number of rows in each year. add the previous year's onset, using NA for 2004
# cells_per_year <- nrow(cell_sf[cell_sf$year == 2004,])
# prev_year_onsets <- cell_sf[cell_sf$year <= 2013, 'onset']
# st_geometry(prev_year_onsets) <- NULL
# cell_sf$prev_onset <- c(rep(NA, cells_per_year), prev_year_onsets$onset)
# join median, percentile data to cell_sf
# cell_sf has median information, but copy it and put in percentile info for DC and SC plant
cell_sf$plant_stat_type <- rep("median", nrow(cell_sf))
cell_sf_percentile5 <- cell_sf
cell_sf_percentile5$SC_plant <- percentile5_cell$SC_plant
cell_sf_percentile5$DC_plant <- percentile5_cell$DC_plant
cell_sf_percentile5$plant_stat_type <- rep("percentile5", nrow(cell_sf_percentile5))
cell_sf_percentile25 <- cell_sf
cell_sf_percentile25$SC_plant <- percentile25_cell$SC_plant
cell_sf_percentile25$DC_plant <- percentile25_cell$DC_plant
cell_sf_percentile25$plant_stat_type <- rep("percentile25", nrow(cell_sf_percentile25))
cell_sf_percentile75 <- cell_sf
cell_sf_percentile75$SC_plant <- percentile75_cell$SC_plant
cell_sf_percentile75$DC_plant <- percentile75_cell$DC_plant
cell_sf_percentile75$plant_stat_type <- rep("percentile75", nrow(cell_sf_percentile75))
cell_sf_percentile95 <- cell_sf
cell_sf_percentile95$SC_plant <- percentile95_cell$SC_plant
cell_sf_percentile95$DC_plant <- percentile95_cell$DC_plant
cell_sf_percentile95$plant_stat_type <- rep("percentile95", nrow(cell_sf_percentile95))
cell_sf <- rbind(cell_sf, cell_sf_percentile5, cell_sf_percentile25, cell_sf_percentile75, cell_sf_percentile95)
cell_sf_tidy <- cell_sf %>% tidy_by_intensity_plant("SC_plant", "DC_plant") %>%
dplyr::select(-c(SC_harvest, DC_harvest)) %>%
categorize_regions_cell_sf_tidy() # categorize cells into four regions
cell_sf_tidy$year_index <- cell_sf_tidy$year - 2003
cell_sf_tidy$year_factor <- as.factor(cell_sf_tidy$year)
#cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy <- cell_sf_tidy[!is.na(cell_sf_tidy$plant),]
cell_sf_tidy$delay <- cell_sf_tidy$plant - cell_sf_tidy$onset
# NOTE: the followign works but is slow, did it another way above
# # add previous year's onset; if 2004, use 2004's onset
# get_prev_onset <- function(row) {
#   curr_year <- row$year
#   cell_ID_oi <- row$cell_ID
#
#   if (curr_year == 2004) {return(NA)}
#   if (curr_year != 2004) {prev_year <- curr_year - 1}
#
#   prev_onset <- cell_sf_tidy[cell_sf_tidy$year == prev_year & cell_sf_tidy$cell_ID == cell_ID_oi, 'onset']
#   st_geometry(prev_onset) <- NULL
#
#   return(prev_onset[1, 'onset'])
# }
#
# cell_sf_tidy$prev_onset <- apply(cell_sf_tidy, 1, get_prev_onset)
# for the chosen FE specification, but for each intensity x percentile , do model evaluation:
model_evaluation <- data.frame(intensity = character(0), percentile = character(0),
onset_coef = numeric(0), onset_coef_stderr = numeric(0),
year_coef = numeric(0), year_coef_stderr = numeric(0),
R2 = numeric(0), resid_mean = numeric(0),
percent_tempauto = numeric(0), mean_residual_moran = numeric(0),
mean_residual_moran_pval = numeric(0),
highest_predictor_correlation = numeric(0)
)
for (intensity in c("DC", "SC")) {
for (percentile in c("percentile5", "percentile25", "median", "percentile75", "percentile95")) {
cell_df <- cell_sf_tidy
st_geometry(cell_df) <- NULL
data_subset_sf <- cell_sf_tidy[(cell_sf_tidy$plant_stat_type == percentile) & (cell_sf_tidy$intensity == intensity), ]
data_subset <- cell_df[(cell_df$plant_stat_type == percentile) & (cell_df$intensity == intensity), ]
data_subset_panel <- pdata.frame(data_subset, index = c("cell_ID"))
fe_model <- plm(plant ~ onset + year, data = data_subset_panel, model = "within")
data_subset_sf$residuals <- residuals(fe_model)
data_subset_sf$fitted.values <- fitted.values(fe_model)
data_subset$residuals <- residuals(fe_model)
data_subset$fitted.values <- fitted.values(fe_model)
# get coefficients
coefficients <- fe_model$coefficients
onset_coef <- coefficients["onset"]
year_coef <- coefficients["year"]
# standard errors
std_errors <- summary(fe_model)$coefficients[,2]
onset_std_error <- std_errors["onset"]
year_std_error <- std_errors["year"]
# R2
SST <- sum((data_subset$plant - mean(data_subset$plant))^2)
SSE <- sum((data_subset$residuals - mean(data_subset$residuals))^2)
R2 <- 1 - SSE/SST
# correlation plot
print('pearson correlation:')
print(intensity)
print(percentile)
to_correlation <- data_subset_sf[, c('onset', 'year', 'residuals')]
st_geometry(to_correlation) <- NULL
print(cor(to_correlation, method = "pearson", use = "complete.obs"))
# residuals of zero mean --------------------------------------------------------------------
resid_mean = mean(data_subset$residuals)
# QQ plot for residuals ---------------------------------------------------------------------
qqnorm(data_subset$residuals, pch = 1, frame = FALSE, main = paste('QQ plot for residual', intensity, percentile))
qqline(data_subset$residuals, col = "steelblue", lwd = 2)
# correlation between residual and each of the predictors (exogeneity) ----------------------
plot(data_subset$onset, data_subset$residuals, main = paste("onset vs residual (exogeneity)", intensity, percentile))
abline(h = 0)
plot(data_subset$year, data_subset$residuals, main = paste("year vs residual (exogeneity)", intensity, percentile))
abline(h = 0)
# temporal autocorrelation of residual -----------------------------------------------------
data_subset_2 <- data_subset[complete.cases(data_subset),]
cells_list <- list()
i <- 1
for (year in 2004:2014) {
cells_in_year <- data_subset_2[data_subset_2$year == year,]
cells_list[[i]] <- cells_in_year$label
i <- i + 1
}
full_data_cells <- Reduce(intersect, cells_list)
data_subset_2 <- data_subset_2[data_subset_2$label %in% full_data_cells, ]
data_subset_2_nested <- group_by(data.frame(data_subset_2), label) %>% nest()
dwtest_one_cell <- function(data) {
dwtest(residuals ~ 1, data = data)
}
data_subset_2 <- data_subset_2_nested %>%
mutate(dwtest = map(data, dwtest_one_cell)) %>%
mutate(test_df = map(dwtest, generics::tidy)) %>%
unnest(test_df)
# calculate proportion of p values below 5% significance, with Bonferroni correction
percent_tempauto <- mean(data_subset_2$p.value < 0.05/nrow(data_subset_2))
# spatial autocorrelation of residual ----------------------------------------------------------
residual_morans <- numeric(0)
residual_moran_pvals <- numeric(0)
for (year_oi in 2004:2014) {
# need 'one layer': one year, one intensity, set up weights
to_autocorrelation <- data_subset_sf[data_subset_sf$year == year_oi, ]
to_autocorrelation_sp <- as(to_autocorrelation, "Spatial")
st_geometry(to_autocorrelation) <- NULL # turn to_autocorrelation into data frame
centroids <- coordinates(to_autocorrelation_sp)
to_autocorrelation_points <- SpatialPointsDataFrame(coords = centroids, data = to_autocorrelation)
nb<-knn2nb(knearneigh(to_autocorrelation_points))
lw <- nb2listw(nb, zero.policy = TRUE)
# calculate spatial autocorrelation
moran_residual <- moran.mc(to_autocorrelation_points$residuals, lw, 500, zero.policy = TRUE)
residual_morans <- c(residual_morans, moran_residual$statistic)
residual_moran_pvals <- c(residual_moran_pvals, moran_residual$p.value)
}
mean_residual_moran <- mean(residual_morans)
mean_residual_moran_pval <- mean(residual_moran_pvals)
# correlation of selected predictors (to each other) -------------------------------------------
predictors <- data_subset[,c("onset", "year")]
correlations <- cor(predictors)
diag(correlations) <- 0 # place 1 with 0 on diagonal
highest_predictor_correlation <- max(abs(correlations))
# residual vs fitted value plot (look for no pattern and constant variance) --------------------
plot(x = as.numeric(data_subset$fitted.values), y = as.numeric(data_subset$residuals),
main = paste("fitted values vs residuals", intensity, percentile),
xlab = 'fitted value', ylab = 'residual')
abline(h = 0, col = 'red')
# residual vs index (look for no pattern) ------------------------------------------------------
plot(as.numeric(data_subset$residuals), main = paste("residual vs index", intensity, percentile))
# save results
model_evaluation <- rbind(model_evaluation, data.frame(intensity = intensity, percentile = percentile,
onset_coef = onset_coef, onset_coef_stderr = onset_std_error,
year_coef = year_coef, year_coef_stderr = year_std_error,
R2 = R2, resid_mean = resid_mean,
percent_tempauto = percent_tempauto, mean_residual_moran = mean_residual_moran,
mean_residual_moran_pval = mean_residual_moran_pval,
highest_predictor_correlation = highest_predictor_correlation
))
}
}
print(model_evaluation)
