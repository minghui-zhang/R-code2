all_results <- rbind(all_results, get(loaded_data))
rm(loaded_data) # Remove the old object since you've stored it in result_name
}
# create new column for onset_def_type + thres combination
create_type_and_thres_col <- function(row) {
onset_type <- row['onset_def_type']
thres_val <- row['thres']
type_and_thres <- paste0(onset_type, '_', thres_val)
return(type_and_thres)
}
all_results['onset_def_type_thres'] <- apply(all_results, 1, create_type_and_thres_col)
View(all_results)
grouped_results <- all_results %>% group_by(onset_def_type_thres) %>%
summarize(mean_onset_coef = mean(onset_coef))
print(grouped_results)
grouped_results <- all_results %>% group_by(onset_def_type_thres) %>%
summarize(mean_onset_coef = mean(onset_coef))
grouped_results <- grouped_results[order(mean_onset_coef),]
grouped_results <- all_results %>% group_by(onset_def_type_thres) %>%
summarize(mean_onset_coef = mean(onset_coef))
grouped_results
grouped_results <- all_results %>% group_by(onset_def_type_thres) %>%
summarize(mean_onset_coef = mean(onset_coef))
grouped_results <- grouped_results[order(grouped_resultsmean_onset_coef),]
grouped_results <- all_results %>% group_by(onset_def_type_thres) %>%
summarize(mean_onset_coef = mean(onset_coef))
grouped_results <- grouped_results[order(grouped_results$mean_onset_coef),]
print(grouped_results)
grouped_results <- all_results %>% group_by(onset_def_type_thres) %>%
summarize(mean_onset_coef = mean(onset_coef))
grouped_results <- grouped_results[order(-grouped_results$mean_onset_coef),]
print(grouped_results)
grouped_results <- all_results %>% group_by(onset_def_type_thres, precip_data) %>%
summarize(mean_onset_coef = mean(onset_coef))
grouped_results <- grouped_results[order(-grouped_results$mean_onset_coef),]
print(grouped_results)
grouped_results <- all_results %>% group_by(onset_def_type_thres, precip_data, intensity) %>%
summarize(mean_onset_coef = mean(onset_coef))
grouped_results <- grouped_results[order(-grouped_results$mean_onset_coef),]
print(grouped_results)
grouped_results <- all_results %>% group_by(onset_def_type_thres, precip_data) %>%
summarize(mean_onset_coef = mean(onset_coef))
grouped_results <- grouped_results[order(-grouped_results$mean_onset_coef),]
print(grouped_results)
grouped_results <- all_results %>% group_by(onset_def_type_thres, intensity) %>%
summarize(mean_onset_coef = mean(onset_coef))
grouped_results <- grouped_results[order(-grouped_results$mean_onset_coef),]
print(grouped_results)
grouped_results <- all_results %>% group_by(onset_def_type_thres, precip_data, intensity) %>%
summarize(mean_onset_coef = mean(onset_coef))
grouped_results <- grouped_results[order(-grouped_results$mean_onset_coef),]
print(grouped_results)
grouped_results <- all_results %>% group_by(onset_def_type_thres) %>%
summarize(mean_onset_coef = mean(onset_coef))
grouped_results <- grouped_results[order(-grouped_results$mean_onset_coef),]
print(grouped_results)
grouped_results <- all_results %>% group_by(onset_def_type_thres, precip_data) %>%
summarize(mean_onset_coef = mean(onset_coef))
grouped_results <- grouped_results[order(-grouped_results$mean_onset_coef),]
print(grouped_results)
# import data -----------------------------------------------------------------------------------------------
filename_muni_median <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/median_muni_', onset_type, '.csv')
filename_muni_percentile5 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile5_muni_', onset_type, '.csv')
filename_muni_percentile25 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile25_muni_', onset_type, '.csv')
filename_muni_shp<- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type, '/shp')
layername_muni_shp <- paste0('median_muni_SHP_', onset_type)
median_muni_raw <- read.csv(filename_muni_median)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(rgdal)
library(raster)
library(sf)
library(sp)
library(leaps)
library(viridis)
library(spatial)
library(spdep)
library(plm)
library(lmtest)
library(Metrics)
library(randomForest)
# select the onset definition
onset_type <- 'freq_10_persiann' #'AA_25_chirps_ATchirps5km' # 'Gabriel_onset'
# import data for all sections
os_system <- 'windows' # mac for laptop or windows for desktop
if (os_system == 'windows') {first_folder <- 'E:'}
if (os_system == 'mac') {first_folder <- '~/Documents'}
if (os_system == 'windows_laptop') {first_folder <- 'D:'}
#E:/R-code/Modeling/code/FCN_clean_csvs.R
#~/Documents/R-code
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_clean_csvs.R'))
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_plotting.R'))
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_sample_data.R'))
source(paste0(first_folder,'/R-code2/Modeling/code/FCN_run_model_spatial_sampled.R'))
MT_outline <- readOGR(dsn = paste0(first_folder,'/R-code2/Modeling/data/shp/MatoGrossoOutline'), layer = 'MatoGrossoOutline')
crs(MT_outline) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
min_soy_area <- 2 #km2. min area of total or SC/DC soy in cell, muni or property to be considered in model
# import data -----------------------------------------------------------------------------------------------
filename_muni_median <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/median_muni_', onset_type, '.csv')
filename_muni_percentile5 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile5_muni_', onset_type, '.csv')
filename_muni_percentile25 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile25_muni_', onset_type, '.csv')
filename_muni_shp<- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type, '/shp')
layername_muni_shp <- paste0('median_muni_SHP_', onset_type)
median_muni_raw <- read.csv(filename_muni_median)
percentile5_muni_raw <- read.csv(filename_muni_percentile5)
percentile25_muni_raw <- read.csv(filename_muni_percentile25)
muni_sf <- st_read(dsn = filename_muni_shp, layer = layername_muni_shp)
# clean data ------------------------------------------------------------------------------
# median muni
median_muni <- median_muni_raw %>% rename_cols_median_muni()
percentile5_muni <- percentile5_muni_raw %>% filter(year > 0) %>% filter(Muni_code > 0)
percentile25_muni <- percentile25_muni_raw %>% filter(year > 0)  %>% filter(Muni_code > 0)
# create tidy datasets
muni_tidy <- tidy_combine_muni(median_muni, percentile5_muni, percentile25_muni)
muni_tidy <- categorize_vars_muni_tidy(muni_tidy)
muni_untidy <- categorize_vars_muni_untidy(median_muni)
muni_sf$plant_stat_type <- rep("median", nrow(muni_sf))
# get rid of rows in muni_sf with NA in planting dates and Muni_code
muni_sf <- muni_sf[!is.na(muni_sf$SC_plant) | !is.na(muni_sf$DC_plant),]
muni_sf_percentile5 <- muni_sf
muni_sf_percentile5$SC_plant <- percentile5_muni$single_plant
muni_sf_percentile5$DC_plant <- percentile5_muni$double_plant
muni_sf_percentile5$plant_stat_type <- rep("percentile5", nrow(muni_sf_percentile5))
muni_sf_percentile25 <- muni_sf
muni_sf_percentile25$SC_plant <- percentile25_muni$single_plant
muni_sf_percentile25$DC_plant <- percentile25_muni$double_plant
muni_sf_percentile25$plant_stat_type <- rep("percentile25", nrow(muni_sf_percentile25))
muni_sf <- rbind(muni_sf, muni_sf_percentile5, muni_sf_percentile25)
muni_sf_tidy <- muni_sf %>% tidy_by_intensity_plant("SC_plant", "DC_plant") %>%
dplyr::select(-c(SC_harvest, DC_harvest))
muni_sf_tidy$year_index <- muni_sf_tidy$year - 2003
muni_sf_tidy$year_factor <- as.factor(muni_sf_tidy$year)
muni_sf_tidy <- muni_sf_tidy %>%  drop_na
muni_sf_tidy$delay <- muni_sf_tidy$plant - muni_sf_tidy$onset
# Criteria 1: R2 of OLS model at each observation scale ----------------------------------------------------------
# Run OLS model with (1) all data points, (2) year, onset, lat, lon, for (3) the chosen onset, (4) at each observation scale (cell 25km, CARpoly, muni) and (5) each planting percentile
# Return R2 for each observation scale
# model_CARpoly_median <- lm(plant ~ onset + year + lat + lon + intensity + plant_stat_type, data = CARpoly_sf_tidy)
# model_CARpoly_percentile5 <- lm(plant ~ onset + year + lat + lon + intensity + plant_stat_type, data = CARpoly_sf_tidy)
# model_CARpoly_percentile95 <- lm(plant ~ onset + year + lat + lon + intensity + plant_stat_type, data = CARpoly_sf_tidy)
model_cell_median <- lm(plant ~ onset + year + lat + lon + intensity + plant_stat_type, data = cell_sf_tidy)
# cell data -------------------------------------------------------------------------------------------
filename_cell_median <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/median_onset_cell_', onset_type, '.csv')
filename_cell_percentile5 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile5_onset_cell_', onset_type, '.csv')
filename_cell_percentile25 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile25_onset_cell_', onset_type, '.csv')
filename_cell_percentile75 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile75_onset_cell_', onset_type, '.csv')
filename_cell_percentile95 <- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type,
'/percentile95_onset_cell_', onset_type, '.csv')
filename_cell_shp<- paste0(first_folder,'/R-code-large-files/data_onset_', onset_type, '/shp')
layername_cell_shp <- paste0('median_onset_cell_SHP_', onset_type)
median_cell_raw <- read.csv(filename_cell_median)
percentile5_cell_raw <- read.csv(filename_cell_percentile5)
percentile25_cell_raw <- read.csv(filename_cell_percentile25)
percentile75_cell_raw <- read.csv(filename_cell_percentile75)
percentile95_cell_raw <- read.csv(filename_cell_percentile95)
cell_sf <- st_read(dsn = filename_cell_shp, layer = layername_cell_shp)
# clean data --------------------------------------------------------------------------------------------
# csv data
median_cell <- median_cell_raw %>% delete_cols_median_cell() %>%
rename_cols_median_cell()
median_cell$plant_stat_type <- rep('median', nrow(median_cell))
percentile5_cell <- percentile5_cell_raw %>% rename_cols_percentile_cell()
percentile25_cell <- percentile25_cell_raw %>% rename_cols_percentile_cell()
percentile75_cell <- percentile75_cell_raw %>% rename_cols_percentile_cell()
percentile95_cell <- percentile95_cell_raw %>% rename_cols_percentile_cell()
# sf data
# add cell_ID
clean_cell_ID <- function(cell_ID) {
strsplit(cell_ID, "_")[[1]][2]
}
# get cell_ID column for median
cell_sf$cell_ID <- median_cell$cell_ID
cell_sf$cell_ID <- sapply(as.character(cell_sf$cell_ID), clean_cell_ID)
# join median, percentile data to cell_sf
# cell_sf has median information, but copy it and put in percentile info for DC and SC plant
cell_sf$plant_stat_type <- rep("median", nrow(cell_sf))
cell_sf_percentile5 <- cell_sf
cell_sf_percentile5$SC_plant <- percentile5_cell$SC_plant
cell_sf_percentile5$DC_plant <- percentile5_cell$DC_plant
cell_sf_percentile5$plant_stat_type <- rep("percentile5", nrow(cell_sf_percentile5))
cell_sf_percentile25 <- cell_sf
cell_sf_percentile25$SC_plant <- percentile25_cell$SC_plant
cell_sf_percentile25$DC_plant <- percentile25_cell$DC_plant
cell_sf_percentile25$plant_stat_type <- rep("percentile25", nrow(cell_sf_percentile25))
cell_sf_percentile75 <- cell_sf
cell_sf_percentile75$SC_plant <- percentile75_cell$SC_plant
cell_sf_percentile75$DC_plant <- percentile75_cell$DC_plant
cell_sf_percentile75$plant_stat_type <- rep("percentile75", nrow(cell_sf_percentile75))
cell_sf_percentile95 <- cell_sf
cell_sf_percentile95$SC_plant <- percentile95_cell$SC_plant
cell_sf_percentile95$DC_plant <- percentile95_cell$DC_plant
cell_sf_percentile95$plant_stat_type <- rep("percentile95", nrow(cell_sf_percentile95))
cell_sf <- rbind(cell_sf, cell_sf_percentile5, cell_sf_percentile25, cell_sf_percentile75, cell_sf_percentile95)
cell_sf_tidy <- cell_sf %>% tidy_by_intensity_plant("SC_plant", "DC_plant") %>%
dplyr::select(-c(SC_harvest, DC_harvest)) %>%
categorize_regions_cell_sf_tidy() # categorize cells into four regions
cell_sf_tidy$year_index <- cell_sf_tidy$year - 2003
cell_sf_tidy$year_factor <- as.factor(cell_sf_tidy$year)
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy$delay <- cell_sf_tidy$plant - cell_sf_tidy$onset
# Criteria 1: R2 of OLS model at each observation scale ----------------------------------------------------------
# Run OLS model with (1) all data points, (2) year, onset, lat, lon, for (3) the chosen onset, (4) at each observation scale (cell 25km, CARpoly, muni) and (5) each planting percentile
# Return R2 for each observation scale
# model_CARpoly_median <- lm(plant ~ onset + year + lat + lon + intensity + plant_stat_type, data = CARpoly_sf_tidy)
# model_CARpoly_percentile5 <- lm(plant ~ onset + year + lat + lon + intensity + plant_stat_type, data = CARpoly_sf_tidy)
# model_CARpoly_percentile95 <- lm(plant ~ onset + year + lat + lon + intensity + plant_stat_type, data = CARpoly_sf_tidy)
model_cell_median <- lm(plant ~ onset + year + lat + lon + intensity + plant_stat_type, data = cell_sf_tidy)
model_cell_percentile5 <- lm(plant ~ onset + year + lat + lon + intensity + plant_stat_type, data = cell_sf_tidy)
model_cell_percentile95 <- lm(plant ~ onset + year + lat + lon + intensity + plant_stat_type, data = cell_sf_tidy)
model_muni_median <- lm(plant ~ onset + year + lat + lon + intensity + plant_stat_type, data = muni_sf_tidy)
model_muni_percentile5 <- lm(plant ~ onset + year + lat + lon + intensity + plant_stat_type, data = muni_sf_tidy)
model_muni_percentile95 <- lm(plant ~ onset + year + lat + lon + intensity + plant_stat_type, data = muni_sf_tidy)
# R2_CARpoly_median <- summary(model_CARpoly_median)$r.squared
# R2_CARpoly_percentile5 <- summary(model_CARpoly_percentile5)$r.squared
# R2_CARpoly_percentile95 <- summary(model_CARpoly_percentile95)$r.squared
R2_cell_median <- summary(model_cell_median)$r.squared
R2_cell_percentile5 <- summary(model_cell_percentile5)$r.squared
R2_cell_percentile95 <- summary(model_cell_percentile95)$r.squared
R2_muni_median <- summary(model_muni_median)$r.squared
R2_muni_percentile5 <- summary(model_muni_percentile5)$r.squared
R2_muni_percentile95 <- summary(model_muni_percentile95)$r.squared
print(paste('R2 for median (CARpoly, cell, and muni):', R2_cell_median, R2_muni_median)) # R2_CARpoly_median,
print(paste('R2 for percentile5 (CARpoly, cell, and muni):',  R2_cell_percentile5, R2_muni_percentile5)) #R2_CARpoly_percentile5,
print(paste('R2 for percentile95 (CARpoly, cell, and muni):',  R2_cell_percentile95, R2_muni_percentile95)) # R2_CARpoly_percentile95,
# Criteria 2: variability of planting date
for (intensity in c('SC', 'DC')) {
for (percentile in c('plant_median', 'plant_percentile5', 'plant_percentile95')) {
#sd_CARpoly = sd(CARpoly_sf_tidy[CARpoly_sf_tidy$intensity == intensity, percentile], na.rm = TRUE)
sd_cell = sd(cell_sf_tidy[cell_sf_tidy$intensity == intensity, percentile], na.rm = TRUE)
sd_muni = sd(muni_sf_tidy[muni_sf_tidy$intensity == intensity, percentile], na.rm = TRUE)
print('--------------------')
print(percentile)
print(intensity)
#print(paste('CAR poly', intensity, percentile, 'planting date std: ', sd_CARpoly))
print(paste('cell', intensity, percentile, 'planting date std: ', sd_cell))
print(paste('muni', intensity, percentile, 'planting date std: ', sd_muni))
}
}
# for both OLS and FE, run model with chosen predictors and all data points (separated by intensity and percentile)
# initialize storage of
spatial_autocorr_alldata <- data.frame(model = character(0), year = numeric(0), p_value = numeric(0),
moran_i = numeric(0), intensity = character(0), percentile = character(0))
temp_autocorr_alldata <- data.frame(model = character(0), p_value = numeric(0),
dw = numeric(0), intensity = character(0), percentile = character(0),
percent_autocorr = numeric(0))
# OLS
for (intensity in c('SC', 'DC')) {
for (percentile in c('median', 'percentile5', 'percentile25', 'percentile75', 'percentile95')) {
# OLS
data_subset = cell_sf_tidy[(cell_sf_tidy$intensity == intensity) & (cell_sf_tidy$plant_stat_type == percentile), ]
OLS_model = lm(plant ~ onset + year_index + region + lat, data = data_subset)
data_subset$residuals <- residuals(OLS_model)
# temporal autocorrelation
data_subset_df <- data_subset
# filter out all cells where there isn't data for all years
st_geometry(data_subset_df) <- NULL
data_subset_df <- data_subset_df[complete.cases(data_subset_df),]
cells_list <- list()
i <- 1
for (year in 2004:2014) {
cells_in_year <- data_subset_df[data_subset_df$year == year,]
cells_list[[i]] <- cells_in_year$label
i <- i + 1
}
full_data_cells <- Reduce(intersect, cells_list)
data_subset_df<- data_subset_df[data_subset_df$label %in% full_data_cells, ]
data_subset_df_nested <- group_by(data.frame(data_subset_df), label) %>% nest()
dwtest_one_cell <- function(data) {
dwtest(residuals ~ 1, data = data)
}
data_subset_df <- data_subset_df_nested %>%
mutate(dwtest = map(data, dwtest_one_cell)) %>%
mutate(test_df = map(dwtest, generics::tidy)) %>%
unnest(test_df)
# calculate proportion of p values below 5% significance, with Bonferroni correction
percent_tempauto <- mean(data_subset_df$p.value < 0.05/nrow(data_subset_df))
temp_autocorr_alldata <- rbind(temp_autocorr_alldata,
data.frame(model = "OLS", intensity = intensity,
percentile = percentile, dw = mean(data_subset_df$statistic),
p_value = mean(data_subset_df$p.value),
percent_autocorr = percent_tempauto))
# spatial autocorrelation
for (year_oi in 2004:2014) {
# need 'one layer': one year, one intensity, set up weights
to_autocorrelation <- data_subset[data_subset$year == year_oi, ]
to_autocorrelation_sp <- as(to_autocorrelation, "Spatial")
st_geometry(to_autocorrelation) <- NULL # turn to_autocorrelation into data frame
centroids <- coordinates(to_autocorrelation_sp)
to_autocorrelation_points <- SpatialPointsDataFrame(coords = centroids, data = to_autocorrelation)
nb<-knn2nb(knearneigh(to_autocorrelation_points))
lw <- nb2listw(nb, zero.policy = TRUE)
# OLS: calculate spatial autocorrelation
moran_residual <- moran.mc(to_autocorrelation_points$residuals, lw, 500, zero.policy = TRUE)
residual_moran <- moran_residual$statistic
residual_moran_pval <- moran_residual$p.value
# save spatial autocorrelation information
spatial_autocorr_alldata <- rbind(spatial_autocorr_alldata,
data.frame(model = "OLS", year = year_oi,
p_value = residual_moran_pval, moran_i = residual_moran,
intensity = intensity, percentile = percentile))
}
}
}
# FE
for (intensity in c('SC', 'DC')) {
for (percentile in c('median', 'percentile5', 'percentile25', 'percentile75', 'percentile95')) {
data_subset = cell_sf_tidy[(cell_sf_tidy$intensity == intensity) & (cell_sf_tidy$plant_stat_type == percentile), ]
data_subset_panel <- pdata.frame(data_subset,index = c("cell_ID"))
FE_model <- plm(plant ~ onset + year_index, data =  data_subset_panel, model = "within")
data_subset$residuals <- residuals(FE_model)
# temporal autocorrelation
data_subset_df <- data_subset
# filter out all cells where there isn't data for all years
st_geometry(data_subset_df) <- NULL
data_subset_df <- data_subset_df[complete.cases(data_subset_df),]
cells_list <- list()
i <- 1
for (year in 2004:2014) {
cells_in_year <- data_subset_df[data_subset_df$year == year,]
cells_list[[i]] <- cells_in_year$label
i <- i + 1
}
full_data_cells <- Reduce(intersect, cells_list)
data_subset_df<- data_subset_df[data_subset_df$label %in% full_data_cells, ]
data_subset_df_nested <- group_by(data.frame(data_subset_df), label) %>% nest()
dwtest_one_cell <- function(data) {
dwtest(residuals ~ 1, data = data)
}
data_subset_df <- data_subset_df_nested %>%
mutate(dwtest = map(data, dwtest_one_cell)) %>%
mutate(test_df = map(dwtest, generics::tidy)) %>%
unnest(test_df)
# calculate proportion of p values below 5% significance, with Bonferroni correction
percent_tempauto <- mean(data_subset_df$p.value < 0.05/nrow(data_subset_df))
temp_autocorr_alldata <- rbind(temp_autocorr_alldata,
data.frame(model = "FE", intensity = intensity,
percentile = percentile, dw = mean(data_subset_df$statistic),
p_value = mean(data_subset_df$p.value),
percent_autocorr = percent_tempauto))
# spatial autocorrelation
for (year_oi in 2004:2014) {
# need 'one layer': one year, one intensity, set up weights
to_autocorrelation <- data_subset[data_subset$year == year_oi, ]
to_autocorrelation_sp <- as(to_autocorrelation, "Spatial")
st_geometry(to_autocorrelation) <- NULL # turn to_autocorrelation into data frame
centroids <- coordinates(to_autocorrelation_sp)
to_autocorrelation_points <- SpatialPointsDataFrame(coords = centroids, data = to_autocorrelation)
nb<-knn2nb(knearneigh(to_autocorrelation_points))
lw <- nb2listw(nb, zero.policy = TRUE)
# calculate spatial autocorrelation
moran_residual <- moran.mc(to_autocorrelation_points$residuals, lw, 500, zero.policy = TRUE)
residual_moran <- moran_residual$statistic
residual_moran_pval <- moran_residual$p.value
# save spatial autocorrelation information
spatial_autocorr_alldata <- rbind(spatial_autocorr_alldata,
data.frame(model = "FE", year = year_oi,
p_value = residual_moran_pval, moran_i = residual_moran,
intensity = intensity, percentile = percentile))
}
}
}
# summarize spatial correlation when all data points are retained
morani_summary_alldata <- spatial_autocorr_alldata %>%
group_by(model, intensity, percentile) %>%
dplyr::summarize(mean_moran_i = mean(moran_i), sd_moran_i = sd(moran_i))
moran_pval_summary_alldata <- spatial_autocorr_alldata %>%
group_by(model, intensity, percentile) %>%
dplyr::summarize(mean_pval = mean(p_value), sd_pval = sd(p_value))
print('spatial autocorrelation when using all data')
print(moran_pval_summary_alldata)
print('temporal autocorrelation when using all data')
print(temp_autocorr_alldata)
View(moran_pval_summary_alldata)
View(spatial_autocorr_alldata)
View(morani_summary_alldata)
# F test for FE vs pooled OLS
# set up models with all data
chosen_percentile <- "percentile5"
chosen_intensity <- "DC"
cell_df <- cell_sf_tidy[(cell_sf_tidy$plant_stat_type == chosen_percentile) & (cell_sf_tidy$intensity == chosen_intensity), ]
cell_df_panel <- pdata.frame(cell_df, index = c("cell_ID"))
ols_model <- lm(plant ~ onset + year + lat + region, data = cell_df)
fe_model <- plm(plant ~ onset + year, data =  cell_df_panel, model = "within")
print(plm::pFtest(fe_model, ols_model))
# F test for FE vs pooled OLS
# set up models with all data
chosen_percentile <- "percentile5"
chosen_intensity <- "DC"
cell_df <- cell_sf_tidy[(cell_sf_tidy$plant_stat_type == chosen_percentile) & (cell_sf_tidy$intensity == chosen_intensity), ]
cell_df_panel <- pdata.frame(cell_df, index = c("cell_ID"))
ols_model <- lm(plant ~ onset + year + lat + region, data = cell_df)
fe_model <- plm(plant ~ onset + year, data =  cell_df_panel, model = "within")
print(plm::pFtest(fe_model, ols_model))
# for the chosen FE specification, but for each intensity x percentile , do model evaluation:
model_evaluation <- data.frame(intensity = character(0), percentile = character(0),
onset_coef = numeric(0), onset_coef_stderr = numeric(0),
year_coef = numeric(0), year_coef_stderr = numeric(0),
R2 = numeric(0), resid_mean = numeric(0),
percent_tempauto = numeric(0), mean_residual_moran = numeric(0),
mean_residual_moran_pval = numeric(0),
highest_predictor_correlation = numeric(0)
)
for (intensity in c("DC", "SC")) {
for (percentile in c("percentile5", "percentile25", "median", "percentile75", "percentile95")) {
cell_df <- cell_sf_tidy
st_geometry(cell_df) <- NULL
data_subset_sf <- cell_sf_tidy[(cell_sf_tidy$plant_stat_type == percentile) & (cell_sf_tidy$intensity == intensity), ]
data_subset <- cell_df[(cell_df$plant_stat_type == percentile) & (cell_df$intensity == intensity), ]
data_subset_panel <- pdata.frame(data_subset, index = c("cell_ID"))
fe_model <- plm(plant ~ onset + year, data = data_subset_panel, model = "within")
data_subset_sf$residuals <- residuals(fe_model)
data_subset_sf$fitted.values <- fitted.values(fe_model)
data_subset$residuals <- residuals(fe_model)
data_subset$fitted.values <- fitted.values(fe_model)
# get coefficients
coefficients <- fe_model$coefficients
onset_coef <- coefficients["onset"]
year_coef <- coefficients["year"]
# standard errors
std_errors <- summary(fe_model)$coefficients[,2]
onset_std_error <- std_errors["onset"]
year_std_error <- std_errors["year"]
# R2
SST <- sum((data_subset$plant - mean(data_subset$plant))^2)
SSE <- sum((data_subset$residuals - mean(data_subset$residuals))^2)
R2 <- 1 - SSE/SST
# residuals of zero mean --------------------------------------------------------------------
resid_mean = mean(data_subset$residuals)
# QQ plot for residuals ---------------------------------------------------------------------
qqnorm(data_subset$residuals, pch = 1, frame = FALSE, main = paste('QQ plot for residual', intensity, percentile))
qqline(data_subset$residuals, col = "steelblue", lwd = 2)
# correlation between residual and each of the predictors (exogeneity) ----------------------
plot(data_subset$onset, data_subset$residuals, main = paste("onset vs residual (exogeneity)", intensity, percentile))
abline(h = 0)
plot(data_subset$year, data_subset$residuals, main = paste("year vs residual (exogeneity)", intensity, percentile))
abline(h = 0)
# temporal autocorrelation of residual -----------------------------------------------------
data_subset_2 <- data_subset[complete.cases(data_subset),]
cells_list <- list()
i <- 1
for (year in 2004:2014) {
cells_in_year <- data_subset_2[data_subset_2$year == year,]
cells_list[[i]] <- cells_in_year$label
i <- i + 1
}
full_data_cells <- Reduce(intersect, cells_list)
data_subset_2 <- data_subset_2[data_subset_2$label %in% full_data_cells, ]
data_subset_2_nested <- group_by(data.frame(data_subset_2), label) %>% nest()
dwtest_one_cell <- function(data) {
dwtest(residuals ~ 1, data = data)
}
data_subset_2 <- data_subset_2_nested %>%
mutate(dwtest = map(data, dwtest_one_cell)) %>%
mutate(test_df = map(dwtest, generics::tidy)) %>%
unnest(test_df)
# calculate proportion of p values below 5% significance, with Bonferroni correction
percent_tempauto <- mean(data_subset_2$p.value < 0.05/nrow(data_subset_2))
# spatial autocorrelation of residual ----------------------------------------------------------
residual_morans <- numeric(0)
residual_moran_pvals <- numeric(0)
for (year_oi in 2004:2014) {
# need 'one layer': one year, one intensity, set up weights
to_autocorrelation <- data_subset_sf[data_subset_sf$year == year_oi, ]
to_autocorrelation_sp <- as(to_autocorrelation, "Spatial")
st_geometry(to_autocorrelation) <- NULL # turn to_autocorrelation into data frame
centroids <- coordinates(to_autocorrelation_sp)
to_autocorrelation_points <- SpatialPointsDataFrame(coords = centroids, data = to_autocorrelation)
nb<-knn2nb(knearneigh(to_autocorrelation_points))
lw <- nb2listw(nb, zero.policy = TRUE)
# calculate spatial autocorrelation
moran_residual <- moran.mc(to_autocorrelation_points$residuals, lw, 500, zero.policy = TRUE)
residual_morans <- c(residual_morans, moran_residual$statistic)
residual_moran_pvals <- c(residual_moran_pvals, moran_residual$p.value)
}
mean_residual_moran <- mean(residual_morans)
mean_residual_moran_pval <- mean(residual_moran_pvals)
# correlation of selected predictors (to each other) -------------------------------------------
predictors <- data_subset[,c("onset", "year")]
correlations <- cor(predictors)
diag(correlations) <- 0 # place 1 with 0 on diagonal
highest_predictor_correlation <- max(abs(correlations))
# residual vs fitted value plot (look for no pattern and constant variance) --------------------
plot(x = as.numeric(data_subset$fitted.values), y = as.numeric(data_subset$residuals),
main = paste("fitted values vs residuals", intensity, percentile),
xlab = 'fitted value', ylab = 'residual')
abline(h = 0, col = 'red')
# residual vs index (look for no pattern) ------------------------------------------------------
plot(as.numeric(data_subset$residuals), main = paste("residual vs index", intensity, percentile))
# save results
model_evaluation <- rbind(model_evaluation, data.frame(intensity = intensity, percentile = percentile,
onset_coef = onset_coef, onset_coef_stderr = onset_std_error,
year_coef = year_coef, year_coef_stderr = year_std_error,
R2 = R2, resid_mean = resid_mean,
percent_tempauto = percent_tempauto, mean_residual_moran = mean_residual_moran,
mean_residual_moran_pval = mean_residual_moran_pval,
highest_predictor_correlation = highest_predictor_correlation
))
}
}
print(model_evaluation)
View(model_evaluation)
