for (year in 2004:2014) {
cells_in_year <- cell_tidy_DC[cell_tidy_DC$year == year,]
cells_list[[i]] <- cells_in_year$cell_ID
i <- i + 1
}
full_data_cells <- Reduce(intersect, cells_list)
cell_tidy_DC <- cell_tidy_DC[cell_tidy_DC$cell_ID %in% full_data_cells, ]
# for rownames (add Aug 1 to the years to turn into dates)
date_rownames <- sapply(2004:2014, paste0, '-08-01')
cell_for_STdata <- cell_tidy_DC %>%
transmute(ID = cell_ID,
obs = plant_median,
date = year) %>%
spread(ID, obs) %>%
dplyr::select(-c(date)) %>%
as.matrix()
rownames(cell_for_STdata) <- date_rownames
# create covariate data frame. for now, just use lat and lon
covars <- dplyr::select(cell_tidy_DC, cell_ID, latitude, longitude) %>%
unique() %>%
dplyr::rename(ID = cell_ID) #split(cell_sf_tidy, cell_sf_tidy$year)
spatiotemporal_vars <- cell_tidy_DC %>%
transmute(ID = cell_ID,
obs = onset,
date = year) %>%
spread(ID, obs) %>%
dplyr::select(-c(date)) %>%
as.matrix()
rownames(spatiotemporal_vars) <- date_rownames
# SpatioTemporal will be a 3D array, where the third dimension corresponds each spatiotemporal variable
STdata <- createSTdata(cell_for_STdata, covars = covars,
SpatioTemporal = list(onset = spatiotemporal_vars), n.basis = 2)
# summary of the STdata: with print(STdata), or plot(STdata, "loc")
# temporal basis functions
#STdata <- updateTrend(STdata, n.basis = 2)
# to create STmodel, need to specify:
# (1) spatial covariance model for beta and nu fields
# (2) define which covvariates to use for each of the beta fields
# (3) specify any spatiotemporal covariates
# (1) spatial covariance model for beta and nu fields
cov.beta <- list(covf = "exp", nugget = FALSE)
cov.nu <- list(covf = "exp", nugget = ~1, random.effect = FALSE) # No random mean for each nu
# (2) in LUR, put in variables used to model the beta), beta1, and beta3 fields
LUR <- list(~latitude+longitude, ~latitude+longitude, ~1)
# link variable names in STdata$covars dat aframe to locations
locations <- list(coords = c("longitude", "latitude")) # coords are used to compute distances between observation locations, can also include long.lat
# create the STmodel
STmodel <- createSTmodel(STdata, # data
ST = "onset", # specify spatiotemporal variables
LUR = LUR, # spatial covariates
cov.beta = cov.beta, # cov. of alphas
cov.nu = cov.nu, # cov. of nu
locations = locations) # coord. names
# can do print(STmodel) to see summary
# since the regression coefficients are estimated by profile likelihood, only the covariance parameters need starting values specified. once these are optimized, the maximum-likelihood estimate of the regression coefficients can be inferred using generalized least squares
# to see the paramters we're specifying the starting points for, use loglikeSTnames()
model.dim <- loglikeSTdim(STmodel)
x.init <- matrix(3,9,1) #cbind(matrix(3,9,1), matrix(2, 9, 1)) # can have multiple starting points for optimization, see the SpatioTemporal tutorial
#rownames(x.init) <- loglikeSTnames(STmodel, all = FALSE)
SpatioTemporalfit1 <- estimate(STmodel, x.init)
# can do print(SpatioTemporalfit1) to see summary, including converged parameter values from two starint points, and names(SpatialTemporalfit1) to see output included
# output:
# res.all is a list with the optimization results for each starting point, and res.best contains the best optimization results
# within res.all or res.best,
# par = the estimated log-covariance parameters
# value = value of the log-likelihood
# par.cov = estimates, estimated standard errors and t-statistics for the log-covariance parameters
# par.all = same summary as par.cov, but for all teh parameters of the model. the regression coefficients are computed using generalized least squares
print(SpatioTemporalfit1$res.best$par.all)
# see Lab 4.3 or SpatioTemporal tutorial for prediction
# cross validation
Ind.cv <- createCV(STmodel, groups=10, min.dist=.1)
x.init <- coef(SpatioTemporalfit1, pars="cov")[,c("par","init")]
est.cv <- estimateCV(STmodel, x.init, Ind.cv)
print(SpatioTemporalfit1$res.best$par.all)
?colSums
?lm
?dgamma
install.packages('plotly')
library(plotly)
mtcars
data()
head(islands)
islands
longley
library(plotly)
library(tidyr)
# convert into long format
plot_ly(x = time(longley$Year), y = longley$Employed)
library(plotly)
library(tidyr)
# convert into long format
plot_ly(x = longley$Year, y = longley$Employed)
library(plotly)
library(tidyr)
# convert into long format
longley <- longley %>%
gather(key = employmentStatus, measurement, c("Employed", "Unemployed"))
plot_ly(x = longley$Year, y = longley$Employed)
longley
library(plotly)
library(tidyr)
# convert into long format
longley <- longley %>%
gather(key = peopleCount, measurement, c("Employed", "total Population"))
library(plotly)
library(tidyr)
# convert into long format
longley <- longley %>%
gather(key = peopleCount, measurement, c("Employed", "total Population"))
library(plotly)
library(tidyr)
# convert into long format
longley <- longley %>%
gather(key = peopleCount, measurement, c("Employed", "Population"))
plot_ly(x = longley$Year, y = longley$measurement, col = peopleCount)
longley
library(plotly)
library(tidyr)
# convert into long format
longley <- longley %>%
gather(key = peopleCount, measurement, c("Employed", "Population"))
library(plotly)
library(tidyr)
data(longley)
# convert into long format
longley <- longley %>%
gather(key = peopleCount, measurement, c("Employed", "Population"))
plot_ly(x = longley$Year, y = longley$measurement, col = longley$peopleCount)
longley
library(plotly)
library(tidyr)
data(longley)
# convert into long format
longley <- longley %>%
gather(key = peopleCount, measurement, c("Employed", "Population"))
plot_ly(longley, x = Year, y = measurement, col = peopleCount)
View(longley)
library(plotly)
library(tidyr)
data(longley)
# convert into long format
longley <- longley %>%
gather(key = peopleCount, measurement, c("Employed", "Population"))
plot_ly(x = time(longley$Year), y = longley$measurement, col = longley$peopleCount)
library(plotly)
library(tidyr)
data(longley)
# convert into long format
longley <- longley %>%
gather(key = peopleCount, measurement, c("Employed", "Population"))
plot_ly(x = longley$Year, y = longley$measurement, color = longley$peopleCount)
library(plotly)
library(tidyr)
data(longley)
# convert into long format
longley <- longley %>%
gather(key = peopleCount, measurement, c("Employed", "Population"))
plot_ly(x = longley$Year, y = longley$measurement, color = longley$peopleCount) %>%
layout(xaxis = "Year", yaxis = "People")
library(plotly)
library(tidyr)
data(longley)
# convert into long format
longley <- longley %>%
gather(key = peopleCount, measurement, c("Employed", "Population"))
myplot <- plot_ly(x = longley$Year, y = longley$measurement, color = longley$peopleCount) %>%
layout(xaxis = "Year", yaxis = "People")
library(plotly)
library(tidyr)
data(longley)
# convert into long format
longley <- longley %>%
gather(key = peopleCount, measurement, c("Employed", "Population"))
myplot <- plot_ly(x = longley$Year, y = longley$measurement, color = longley$peopleCount) %>%
layout(xaxis = "Year", yaxis = "People")
myplot
library(plotly)
library(tidyr)
data(longley)
# convert into long format
longley <- longley %>%
gather(key = peopleCount, measurement, c("Employed", "Population"))
myplot <- plot_ly(x = longley$Year, y = longley$measurement, color = longley$peopleCount)
library(plotly)
library(tidyr)
data(longley)
# convert into long format
longley <- longley %>%
gather(key = peopleCount, measurement, c("Employed", "Population"))
plot_ly(x = longley$Year, y = longley$measurement, color = longley$peopleCount)
library(plotly)
library(tidyr)
data(longley)
# convert into long format
longley <- longley %>%
gather(key = peopleCount, measurement, c("Employed", "Population"))
plot_ly(x = longley$Year, y = longley$measurement, color = longley$peopleCount) %>%
layout(xaxis = list(title = "Year"), yaxis = list(title = "Count"))
library(plotly)
library(tidyr)
data(longley)
# convert into long format
longley <- longley %>%
gather(key = peopleCount, measurement, c("Employed", "Population"))
plot_ly(x = longley$Year, y = longley$measurement, color = longley$peopleCount) %>%
layout(xaxis = list(title = "Year"), yaxis = list(title = "Count"), title = "Longley Demographic Data")
library(plotly)
library(tidyr)
data(longley)
# convert into long format
longley <- longley %>%
gather(key = peopleCount, measurement, c("Employed", "Population"))
plot_ly(x = longley$Year, y = longley$measurement, color = longley$peopleCount) %>%
layout(xaxis = list(title = "Year"), yaxis = list(title = "Count"), title = "Longley's employment and population timeseries")
shiny::runApp('E:/R-code/Webpage')
runApp('E:/R-code/Webpage')
?readOGR
runApp('E:/R-code/Webpage')
runApp('E:/R-code/Webpage')
mean(c(69, 68, 67, 71, 70))
source('~/.active-rstudio-document', echo=TRUE)
stringLength
stdin[stringLength]
stdin[1]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp('E:/R-code/Webpage')
runApp('E:/R-code/Webpage')
runApp('E:/R-code/Webpage')
runApp('E:/R-code/Webpage')
runApp('E:/R-code/Webpage')
runApp('E:/R-code/Webpage')
runApp('E:/R-code/Webpage')
runApp('E:/R-code/Webpage')
runApp('E:/R-code/Webpage')
runApp('E:/R-code/Webpage')
runApp('E:/R-code/Webpage')
runApp('E:/R-code/Webpage')
runApp('E:/R-code/Webpage')
runApp('E:/R-code/Webpage')
runApp('E:/R-code/Webpage')
runApp('E:/R-code/Webpage')
runApp('E:/R-code/Webpage')
runApp('E:/R-code/Webpage')
head(df)
df$plant
df <- readRDS("./cell_spdf.rds")
setwd("~/")
setwd("E:/R-code/Webpage")
runApp()
df <- readRDS("./cell_spdf.rds")
df$year
runApp()
runApp()
install.packages('mapview')
runApp()
testdf <- data.frame(a = c(1,2,3), b = c(3,4,23))
runApp()
runApp()
runApp()
install.packages('leafpop')
install.packages("leafpop")
shiny::runApp()
runApp()
install.packages("leafpop")
library(leafpop)
runApp()
head(df)
runApp()
runApp()
filteredData_allYears()
df[df$intensity == input$user_intensity,]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
filteredData()
runApp()
runApp()
runApp()
cell_sf <- st_read(dsn = 'E:/R-code/Modeling/data/shp/median_onset_cell', layer = 'median_onset_cell_SHP')
library(ggplot2)
library(tidyverse)
library(broom)
library(dplyr)
library(rgdal)
library(rgeos)
library(raster)
library(sf)
library(sp)
library(tmap)
library(viridis)
library(spdep)
library(spatialreg)
library(splm)
library(lmtest)
#E:/R-code/Modeling/code/FCN_clean_csvs.R
#~/Documents/R-code
source('E:/R-code/Modeling/code/FCN_clean_csvs.R')
median_cell_raw <- read.csv('E:/R-code/Modeling/data/median_onset_cell_v2.csv')
percentile5_cell_raw <- read.csv('E:/R-code/Modeling/data/percentile5_onset_cell_v2.csv')
percentile95_cell_raw <- read.csv('E:/R-code/Modeling/data/percentile95_onset_cell_v2.csv')
median_muni_raw <- read.csv('E:/R-code/Modeling/data/median_muni_v2.csv')
percentile5_muni_raw <- read.csv('E:/R-code/Modeling/data/percentile5_muni_v2.csv')
percentile95_muni_raw <- read.csv('E:/R-code/Modeling/data/percentile95_muni_v2.csv')
median_CARpoly_raw <- read.csv('E:/R-code/Modeling/data/median_CARpoly_v2.csv')
percentile5_CARpoly_raw <- read.csv('E:/R-code/Modeling/data/percentile5_CARpoly_v2.csv')
percentile95_CARpoly_raw <- read.csv('E:/R-code/Modeling/data/percentile95_CARpoly_v2.csv')
grid_1deg <- readOGR(dsn = 'E:/R-code/Modeling/data/shp/grid_1deg', layer = 'grid_1deg')
munis <- readOGR(dsn = 'E:/R-code/Modeling/data/shp/munis', layer = 'munis_SHP')
crs(munis) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
MT_outline <- readOGR(dsn = 'E:/R-code/Modeling/data/shp/MatoGrossoOutline', layer = 'MatoGrossoOutline')
crs(MT_outline) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
#cell_shp <- readOGR(dsn = 'E:/R-code/Modeling/data/shp/median_onset_cell', layer = 'median_onset_cell_SHP')
cell_sf <- st_read(dsn = 'E:/R-code/Modeling/data/shp/median_onset_cell', layer = 'median_onset_cell_SHP')
cell_sf_tidy <- cell_sf %>% tidy_by_intensity_plant("SC_plant", "DC_plant") %>%
tidy_by_intensity_delay("SC_delay", "DC_delay") %>%
dplyr::select(-c(SC_harvest, DC_harvest))
cell_sf_tidy$year_index <- cell_sf_tidy$year - 2003
View(cell_sf)
cell_sf <- st_read(dsn = 'E:/R-code/Modeling/data/shp/median_onset_cell', layer = 'median_onset_cell_SHP')
cell_sf_tidy <- cell_sf %>% tidy_by_intensity_plant("SC_plant", "DC_plant") %>%
tidy_by_intensity_delay("SC_delay", "DC_delay") %>%
dplyr::select(-c(SC_harvest, DC_harvest))
cell_sf_tidy$year_index <- cell_sf_tidy$year - 2003
# rename columns of CARpoly data and combine into a single csv before spatial join
median_CARpoly_raw <- rename_cols_median_CARpoly(median_CARpoly_raw)
percentile5_CARpoly_raw <- rename_cols_percentile5_CARpoly(percentile5_CARpoly_raw)
percentile95_CARpoly_raw <- rename_cols_percentile95_CARpoly(percentile95_CARpoly_raw)
CARpoly_raw <- create_CARpoly_raw(median_CARpoly_raw, percentile5_CARpoly_raw, percentile95_CARpoly_raw)
CARpoly_raw <- join_CARpoly_to_muni(CARpoly_raw)
# median cell
median_cell <- median_cell_raw %>% delete_cols_median_cell() %>%
rename_cols_median_cell()
percentile5_cell <- percentile5_cell_raw %>% filter(year > 0)
percentile95_cell <- percentile95_cell_raw %>% filter(year > 0)
# median muni
median_muni <- median_muni_raw %>% rename_cols_median_muni()
percentile5_muni <- percentile5_muni_raw %>% filter(year > 0)
percentile95_muni <- percentile95_muni_raw %>% filter(year > 0)
# create tidy datasets
cell_tidy <- tidy_combine_cell(median_cell, percentile5_cell, percentile95_cell)
muni_tidy <- tidy_combine_muni(median_muni, percentile5_muni, percentile95_muni)
CARpoly_tidy <- tidy_CARpoly(CARpoly_raw)
# categorize numeric variables
cell_tidy <- categorize_vars_cell_tidy(cell_tidy)
cell_untidy <- categorize_vars_cell_untidy(median_cell)
muni_tidy <- categorize_vars_muni_tidy(muni_tidy)
muni_untidy <- categorize_vars_muni_untidy(median_muni)
CARpoly_tidy <- categorize_vars_CARpoly_tidy(CARpoly_tidy) %>% delete_cols_CARpoly_tidy()
CARpoly_untidy <- categorize_vars_CARpoly_untidy(CARpoly_raw)
# change rename cols and delete unnecessary cols
CARpoly_untidy <- CARpoly_untidy %>% rename_cols_CARpoly_untidy() %>%
delete_cols_CARpoly_untidy()
# categorize as new or old or neither in planted soy age (so far only have it for cell scale)
cell_tidy <- cell_tidy %>% cell_categorize_soy_age()
min_soy_area <- 2 #km2. min area of total or SC/DC soy in cell, muni or property to be considered in model
# create tidy datasets
cell_tidy <- tidy_combine_cell(median_cell, percentile5_cell, percentile95_cell)
muni_tidy <- tidy_combine_muni(median_muni, percentile5_muni, percentile95_muni)
CARpoly_tidy <- tidy_CARpoly(CARpoly_raw)
# categorize numeric variables
cell_tidy <- categorize_vars_cell_tidy(cell_tidy)
cell_untidy <- categorize_vars_cell_untidy(median_cell)
muni_tidy <- categorize_vars_muni_tidy(muni_tidy)
muni_untidy <- categorize_vars_muni_untidy(median_muni)
CARpoly_tidy <- categorize_vars_CARpoly_tidy(CARpoly_tidy) %>% delete_cols_CARpoly_tidy()
CARpoly_untidy <- categorize_vars_CARpoly_untidy(CARpoly_raw)
# change rename cols and delete unnecessary cols
CARpoly_untidy <- CARpoly_untidy %>% rename_cols_CARpoly_untidy() %>%
delete_cols_CARpoly_untidy()
# categorize as new or old or neither in planted soy age (so far only have it for cell scale)
cell_tidy <- cell_tidy %>% cell_categorize_soy_age()
cell_untidy <- cell_untidy %>% cell_categorize_soy_age()
# add year_index and year_factor
cell_tidy$year_index <- cell_tidy$year - 2003
cell_untidy$year_index <- cell_untidy$year - 2003
muni_tidy$year_index <- muni_tidy$year - 2003
muni_untidy$year_index <- muni_untidy$year - 2003
CARpoly_tidy$year_index <- CARpoly_tidy$year - 2003
CARpoly_untidy$year_index <- CARpoly_untidy$year - 2003
cell_tidy$year_factor <- cell_tidy$year %>% as.factor()
cell_untidy$year_factor <- cell_untidy$year %>% as.factor()
muni_tidy$year_factor <- muni_tidy$year %>% as.factor()
muni_untidy$year_factor <- muni_untidy$year %>% as.factor()
CARpoly_tidy$year_factor <- CARpoly_tidy$year %>% as.factor()
CARpoly_untidy$year_factor <- CARpoly_untidy$year %>% as.factor()
# use muni_code as factor
cell_tidy$Muni_code_factor <- cell_tidy$Muni_code %>% as.factor()
cell_untidy$Muni_code_factor <- cell_untidy$Muni_code %>% as.factor()
CARpoly_tidy$Muni_code_factor <- CARpoly_tidy$Muni_code %>% as.factor()
CARpoly_untidy$Muni_code_factor <- CARpoly_untidy$Muni_code %>% as.factor()
# choose munis that were planted in 2014 and 2004, merge them
#munis_2014 <- muni_tidy[muni_tidy$year == "2014", c("total_planted_area_km2", "Muni_code")]
#munis_2004 <- muni_tidy[muni_tidy$Muni_code %in% munis_2014$Muni_code &
#                          muni_tidy$year == "2004", c("total_planted_area_km2", "Muni_code")]
#munis_2014 <- munis_2014 %>% rename(area_2014 = total_planted_area_km2)
#munis_2004 <- munis_2004 %>% rename(area_2004 = total_planted_area_km2)
#munis_merged <- merge(munis_2014, munis_2004, by = "Muni_code") %>% unique()
#soy_age <- rep("neither", length(munis_merged$Muni_code))
View(cell_tidy)
View(cell_sf_tidy)
View(median_cell)
cell_sf <- st_read(dsn = 'E:/R-code/Modeling/data/shp/median_onset_cell', layer = 'median_onset_cell_SHP')
# add cell_ID
cell_sf$cell_ID <- median_cell$cell_ID
cell_sf_tidy <- cell_sf %>% tidy_by_intensity_plant("SC_plant", "DC_plant") %>%
tidy_by_intensity_delay("SC_delay", "DC_delay") %>%
dplyr::select(-c(SC_harvest, DC_harvest))
cell_sf_tidy$year_index <- cell_sf_tidy$year - 2003
View(cell_sf_tidy)
cell_sf <- st_read(dsn = 'E:/R-code/Modeling/data/shp/median_onset_cell', layer = 'median_onset_cell_SHP')
# add cell_ID
clean_cell_ID <- function(cell_ID) {
strsplit(cell_ID, "_")[[1]][2]
}
cell_sf$cell_ID <- median_cell$cell_ID
cell_sf$cell_ID <- sapply(as.character(cell_sf$cell_ID), clean_cell_ID)
cell_sf_tidy <- cell_sf %>% tidy_by_intensity_plant("SC_plant", "DC_plant") %>%
tidy_by_intensity_delay("SC_delay", "DC_delay") %>%
dplyr::select(-c(SC_harvest, DC_harvest))
cell_sf_tidy$year_index <- cell_sf_tidy$year - 2003
View(cell_sf)
# for app.R
saveRDS(as(cell_sf_tidy, 'Spatial'), "./cell_spdf.rds")
# from GWR section
late_early_onset_years <- data.frame(
year = 2004:2014,
percent_positive_onset = c(14, 67, 18, 2, 97, 69, 25, 100, 43, 35, 88),
percent_positive_coef = c(42, 34, 56, 40, 97, 60, 53, 93, 97, 89, 77)
)
ggplot(late_early_onset_years, aes(x = percent_positive_onset, y = percent_positive_coef, col = year, label = year)) +
geom_point() +
geom_vline(xintercept = 50) +
geom_text(aes(label=year),hjust=0, vjust=0) +
coord_cartesian(ylim = c(0, 110), xlim = c(0, 110)) +
ggtitle("For statistically significant onset coefs from GWR") +
xlab("Percent cells with positive onset deviation") +
ylab("Percent cells with positive onset coefficient") +
theme_bw()
runApp()
# for app.R
cell_sf_tidy <- cell_sf_tidy %>%  drop_na %>%
mutate(year_factor = as.factor(year))
saveRDS(as(cell_sf_tidy, 'Spatial'), "./cell_spdf.rds")
# from GWR section
late_early_onset_years <- data.frame(
year = 2004:2014,
percent_positive_onset = c(14, 67, 18, 2, 97, 69, 25, 100, 43, 35, 88),
percent_positive_coef = c(42, 34, 56, 40, 97, 60, 53, 93, 97, 89, 77)
)
ggplot(late_early_onset_years, aes(x = percent_positive_onset, y = percent_positive_coef, col = year, label = year)) +
geom_point() +
geom_vline(xintercept = 50) +
geom_text(aes(label=year),hjust=0, vjust=0) +
coord_cartesian(ylim = c(0, 110), xlim = c(0, 110)) +
ggtitle("For statistically significant onset coefs from GWR") +
xlab("Percent cells with positive onset deviation") +
ylab("Percent cells with positive onset coefficient") +
theme_bw()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?over
SpatialPoints(c(-30, 40))
matrix(-30,-30)
matrix(-30,-30, nrow = 1)
matrix(c(-30,-30), nrow = 1)
SpatialPoints(matrix(c(-30,-30), nrow = 1))
runApp()
runApp()
runApp()
runApp()
?addpolygons
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
testpt <- SpatialPoints(matrix(c(-30, -30), nrow = 1))
testpt
crs(testpt) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
runApp()
testpt
testpt <- SpatialPoints(matrix(c(-30, -30, -30.001, -30.001), nrow = 2))
runApp()
